"use strict";
// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventResolution = exports.EventMint = exports.EventClaim = exports.PlantobellyEvents = void 0;
// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead
const wasmclient = __importStar(require("wasmclient"));
const plantobellyHandlers = new Map([
    ["plantobelly.claim", (evt, msg) => evt.claim(new EventClaim(msg))],
    ["plantobelly.mint", (evt, msg) => evt.mint(new EventMint(msg))],
    ["plantobelly.resolution", (evt, msg) => evt.resolution(new EventResolution(msg))],
]);
class PlantobellyEvents {
    /* eslint-disable @typescript-eslint/no-empty-function */
    claim = () => { };
    mint = () => { };
    resolution = () => { };
    /* eslint-enable @typescript-eslint/no-empty-function */
    callHandler(topic, params) {
        const handler = plantobellyHandlers.get(topic);
        if (handler) {
            handler(this, params);
        }
    }
    onPlantobellyClaim(handler) {
        this.claim = handler;
    }
    onPlantobellyMint(handler) {
        this.mint = handler;
    }
    onPlantobellyResolution(handler) {
        this.resolution = handler;
    }
}
exports.PlantobellyEvents = PlantobellyEvents;
class EventClaim extends wasmclient.Event {
    claimer;
    id;
    plantId;
    constructor(msg) {
        super(msg);
        this.claimer = this.nextAgentID();
        this.id = this.nextHash();
        this.plantId = this.nextHash();
    }
}
exports.EventClaim = EventClaim;
class EventMint extends wasmclient.Event {
    balance;
    owner;
    tokenId;
    constructor(msg) {
        super(msg);
        this.balance = this.nextUint64();
        this.owner = this.nextAgentID();
        this.tokenId = this.nextHash();
    }
}
exports.EventMint = EventMint;
class EventResolution extends wasmclient.Event {
    claimer;
    plantId;
    result;
    reward;
    constructor(msg) {
        super(msg);
        this.claimer = this.nextAgentID();
        this.plantId = this.nextHash();
        this.result = this.nextUint32();
        this.reward = this.nextUint64();
    }
}
exports.EventResolution = EventResolution;

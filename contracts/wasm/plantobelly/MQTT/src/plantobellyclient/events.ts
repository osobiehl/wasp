// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "wasmclient"
import * as app from "./plantobelly"

export const eventHandlers: wasmclient.EventHandlers = new Map([
	["plantobelly.claim", (msg: string[]) => app.onPlantobellyClaim(new EventClaim(msg))],
	["plantobelly.mint", (msg: string[]) => app.onPlantobellyMint(new EventMint(msg))],
	["plantobelly.resolution", (msg: string[]) => app.onPlantobellyResolution(new EventResolution(msg))],
]);

export class EventClaim extends wasmclient.Event {
	public readonly claimer: wasmclient.AgentID;
	public readonly id: wasmclient.Hash;
	public readonly plantId: wasmclient.Hash;
	
	public constructor(msg: string[]) {
		super(msg)
		this.claimer = this.nextAgentID();
		this.id = this.nextHash();
		this.plantId = this.nextHash();
	}
}

export class EventMint extends wasmclient.Event {
	public readonly balance: wasmclient.Int64;
	public readonly owner: wasmclient.AgentID;
	public readonly tokenId: wasmclient.Hash;
	
	public constructor(msg: string[]) {
		super(msg)
		this.balance = this.nextInt64();
		this.owner = this.nextAgentID();
		this.tokenId = this.nextHash();
	}
}

export class EventResolution extends wasmclient.Event {
	public readonly claimer: wasmclient.AgentID;
	public readonly plantId: wasmclient.Hash;
	public readonly result: wasmclient.Uint32;
	public readonly reward: wasmclient.Int64;
	
	public constructor(msg: string[]) {
		super(msg)
		this.claimer = this.nextAgentID();
		this.plantId = this.nextHash();
		this.result = this.nextUint32();
		this.reward = this.nextInt64();
	}
}

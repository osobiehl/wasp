"use strict";
// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlantobellyService = exports.IsPlantOwnerResults = exports.IsPlantOwnerView = exports.GetWeatherOraclesResults = exports.GetWeatherOraclesView = exports.GetPlantsFromOwnerResults = exports.GetPlantsFromOwnerView = exports.GetPlantsResults = exports.GetPlantsView = exports.GetPlantOraclesResults = exports.GetPlantOraclesView = exports.GetPlantResults = exports.GetPlantView = exports.GetOwnerResults = exports.GetOwnerView = exports.GetClaimsResults = exports.GetClaimsView = exports.GetClaimResults = exports.GetClaimView = exports.SetPlantWeatherTimeoutFunc = exports.SetPlantWaterFunc = exports.SetOwnerFunc = exports.ResolveClaimFunc = exports.PayClaimerFunc = exports.MintPlantRawFunc = exports.MintPlantFunc = exports.InterruptWeatherEventFunc = exports.InitFunc = exports.EditOwnPlantFunc = exports.ClaimWateringFunc = exports.AddWeatherOracleFunc = exports.AddPlantOracleFunc = exports.AddPlantFundsFunc = exports.ActivatePlantOwnerFunc = void 0;
// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead
const wasmclient = __importStar(require("wasmclient"));
const events = __importStar(require("./events"));
const ArgActive = "active";
const ArgActiveReason = "activeReason";
const ArgAmount = "amount";
const ArgClaimed = "claimed";
const ArgCovered = "covered";
const ArgCurrentWater = "currentWater";
const ArgDescription = "description";
const ArgDuration = "duration";
const ArgFunds = "funds";
const ArgId = "id";
const ArgLattitude = "lattitude";
const ArgLocation = "location";
const ArgLongitude = "longitude";
const ArgManufacturer = "manufacturer";
const ArgMintClaimId = "mintClaimId";
const ArgName = "name";
const ArgNewPlant = "newPlant";
const ArgNewState = "newState";
const ArgOracleId = "oracleId";
const ArgOwner = "owner";
const ArgOwnerId = "ownerId";
const ArgPayReward = "payReward";
const ArgPlantId = "plantId";
const ArgReqClaimId = "reqClaimId";
const ArgReqOwnerId = "reqOwnerId";
const ArgReqPlantId = "reqPlantId";
const ArgReward = "reward";
const ArgTimeoutDuration = "timeoutDuration";
const ArgTimestamp = "timestamp";
const ArgTo = "to";
const ArgValue = "value";
const ArgWaterLevel = "waterLevel";
const ArgWaterTarget = "waterTarget";
const ArgWaterThreshold = "waterThreshold";
const ResClaim = "claim";
const ResClaims = "claims";
const ResIsOwner = "isOwner";
const ResOracles = "oracles";
const ResOwner = "owner";
const ResPlant = "plant";
const ResPlants = "plants";
///////////////////////////// activatePlantOwner /////////////////////////////
class ActivatePlantOwnerFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    newState(v) {
        this.args.set(ArgNewState, this.args.fromBool(v));
    }
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    async post() {
        this.args.mandatory(ArgNewState);
        this.args.mandatory(ArgPlantId);
        return await super.post(0x666005c8, this.args);
    }
}
exports.ActivatePlantOwnerFunc = ActivatePlantOwnerFunc;
///////////////////////////// addPlantFunds /////////////////////////////
class AddPlantFundsFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    value(v) {
        this.args.set(ArgValue, this.args.fromUint64(v));
    }
    async post() {
        this.args.mandatory(ArgPlantId);
        this.args.mandatory(ArgValue);
        return await super.post(0xe756567a, this.args);
    }
}
exports.AddPlantFundsFunc = AddPlantFundsFunc;
///////////////////////////// addPlantOracle /////////////////////////////
class AddPlantOracleFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    oracleId(v) {
        this.args.set(ArgOracleId, this.args.fromAgentID(v));
    }
    async post() {
        this.args.mandatory(ArgOracleId);
        return await super.post(0xca04a73a, this.args);
    }
}
exports.AddPlantOracleFunc = AddPlantOracleFunc;
///////////////////////////// addWeatherOracle /////////////////////////////
class AddWeatherOracleFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    oracleId(v) {
        this.args.set(ArgOracleId, this.args.fromAgentID(v));
    }
    async post() {
        this.args.mandatory(ArgOracleId);
        return await super.post(0x5f3b8b83, this.args);
    }
}
exports.AddWeatherOracleFunc = AddWeatherOracleFunc;
///////////////////////////// claimWatering /////////////////////////////
class ClaimWateringFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    timestamp(v) {
        this.args.set(ArgTimestamp, this.args.fromUint64(v));
    }
    async post() {
        this.args.mandatory(ArgPlantId);
        this.args.mandatory(ArgTimestamp);
        return await super.post(0x1c41f3ed, this.args);
    }
}
exports.ClaimWateringFunc = ClaimWateringFunc;
///////////////////////////// editOwnPlant /////////////////////////////
class EditOwnPlantFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    covered(v) {
        this.args.set(ArgCovered, this.args.fromBool(v));
    }
    description(v) {
        this.args.set(ArgDescription, this.args.fromString(v));
    }
    location(v) {
        this.args.set(ArgLocation, this.args.fromGeolocation(v));
    }
    name(v) {
        this.args.set(ArgName, this.args.fromString(v));
    }
    reward(v) {
        this.args.set(ArgReward, this.args.fromUint64(v));
    }
    waterTarget(v) {
        this.args.set(ArgWaterTarget, this.args.fromInt32(v));
    }
    async post() {
        this.args.mandatory(ArgCovered);
        this.args.mandatory(ArgDescription);
        this.args.mandatory(ArgName);
        this.args.mandatory(ArgReward);
        this.args.mandatory(ArgWaterTarget);
        return await super.post(0xebba038d, this.args);
    }
}
exports.EditOwnPlantFunc = EditOwnPlantFunc;
///////////////////////////// init /////////////////////////////
class InitFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    owner(v) {
        this.args.set(ArgOwner, this.args.fromAgentID(v));
    }
    async post() {
        return await super.post(0x1f44d644, this.args);
    }
}
exports.InitFunc = InitFunc;
///////////////////////////// interruptWeatherEvent /////////////////////////////
class InterruptWeatherEventFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    duration(v) {
        this.args.set(ArgDuration, this.args.fromUint64(v));
    }
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    async post() {
        this.args.mandatory(ArgDuration);
        this.args.mandatory(ArgPlantId);
        return await super.post(0xc42865d1, this.args);
    }
}
exports.InterruptWeatherEventFunc = InterruptWeatherEventFunc;
///////////////////////////// mintPlant /////////////////////////////
class MintPlantFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    newPlant(v) {
        this.args.set(ArgNewPlant, this.args.fromPlant(v));
    }
    async post() {
        return await super.post(0x6aeb84a1, this.args);
    }
}
exports.MintPlantFunc = MintPlantFunc;
///////////////////////////// mintPlantRaw /////////////////////////////
class MintPlantRawFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    active(v) {
        this.args.set(ArgActive, this.args.fromBool(v));
    }
    activeReason(v) {
        this.args.set(ArgActiveReason, this.args.fromUint32(v));
    }
    claimed(v) {
        this.args.set(ArgClaimed, this.args.fromBool(v));
    }
    covered(v) {
        this.args.set(ArgCovered, this.args.fromBool(v));
    }
    currentWater(v) {
        this.args.set(ArgCurrentWater, this.args.fromInt32(v));
    }
    description(v) {
        this.args.set(ArgDescription, this.args.fromString(v));
    }
    funds(v) {
        this.args.set(ArgFunds, this.args.fromUint64(v));
    }
    id(v) {
        this.args.set(ArgId, this.args.fromHash(v));
    }
    lattitude(v) {
        this.args.set(ArgLattitude, this.args.fromString(v));
    }
    longitude(v) {
        this.args.set(ArgLongitude, this.args.fromString(v));
    }
    manufacturer(v) {
        this.args.set(ArgManufacturer, this.args.fromAgentID(v));
    }
    mintClaimId(v) {
        this.args.set(ArgMintClaimId, this.args.fromHash(v));
    }
    name(v) {
        this.args.set(ArgName, this.args.fromString(v));
    }
    owner(v) {
        this.args.set(ArgOwner, this.args.fromAgentID(v));
    }
    payReward(v) {
        this.args.set(ArgPayReward, this.args.fromUint64(v));
    }
    waterTarget(v) {
        this.args.set(ArgWaterTarget, this.args.fromInt32(v));
    }
    waterThreshold(v) {
        this.args.set(ArgWaterThreshold, this.args.fromInt32(v));
    }
    async post() {
        this.args.mandatory(ArgActive);
        this.args.mandatory(ArgActiveReason);
        this.args.mandatory(ArgClaimed);
        this.args.mandatory(ArgCovered);
        this.args.mandatory(ArgCurrentWater);
        this.args.mandatory(ArgDescription);
        this.args.mandatory(ArgFunds);
        this.args.mandatory(ArgId);
        this.args.mandatory(ArgLattitude);
        this.args.mandatory(ArgLongitude);
        this.args.mandatory(ArgManufacturer);
        this.args.mandatory(ArgMintClaimId);
        this.args.mandatory(ArgName);
        this.args.mandatory(ArgOwner);
        this.args.mandatory(ArgPayReward);
        this.args.mandatory(ArgWaterTarget);
        this.args.mandatory(ArgWaterThreshold);
        return await super.post(0x7b8d3bec, this.args);
    }
}
exports.MintPlantRawFunc = MintPlantRawFunc;
///////////////////////////// payClaimer /////////////////////////////
class PayClaimerFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    amount(v) {
        this.args.set(ArgAmount, this.args.fromUint64(v));
    }
    to(v) {
        this.args.set(ArgTo, this.args.fromAgentID(v));
    }
    async post() {
        this.args.mandatory(ArgAmount);
        this.args.mandatory(ArgTo);
        return await super.post(0x2c37ad88, this.args);
    }
}
exports.PayClaimerFunc = PayClaimerFunc;
///////////////////////////// resolveClaim /////////////////////////////
class ResolveClaimFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    id(v) {
        this.args.set(ArgId, this.args.fromHash(v));
    }
    async post() {
        this.args.mandatory(ArgId);
        return await super.post(0x302e03fa, this.args);
    }
}
exports.ResolveClaimFunc = ResolveClaimFunc;
///////////////////////////// setOwner /////////////////////////////
class SetOwnerFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    owner(v) {
        this.args.set(ArgOwner, this.args.fromAgentID(v));
    }
    async post() {
        this.args.mandatory(ArgOwner);
        return await super.post(0x2a15fe7b, this.args);
    }
}
exports.SetOwnerFunc = SetOwnerFunc;
///////////////////////////// setPlantWater /////////////////////////////
class SetPlantWaterFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    waterLevel(v) {
        this.args.set(ArgWaterLevel, this.args.fromInt32(v));
    }
    async post() {
        this.args.mandatory(ArgPlantId);
        this.args.mandatory(ArgWaterLevel);
        return await super.post(0x6a4d53e6, this.args);
    }
}
exports.SetPlantWaterFunc = SetPlantWaterFunc;
///////////////////////////// setPlantWeatherTimeout /////////////////////////////
class SetPlantWeatherTimeoutFunc extends wasmclient.ClientFunc {
    args = new wasmclient.Arguments();
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    timeoutDuration(v) {
        this.args.set(ArgTimeoutDuration, this.args.fromBool(v));
    }
    async post() {
        this.args.mandatory(ArgPlantId);
        this.args.mandatory(ArgTimeoutDuration);
        return await super.post(0x6f912118, this.args);
    }
}
exports.SetPlantWeatherTimeoutFunc = SetPlantWeatherTimeoutFunc;
///////////////////////////// getClaim /////////////////////////////
class GetClaimView extends wasmclient.ClientView {
    args = new wasmclient.Arguments();
    reqClaimId(v) {
        this.args.set(ArgReqClaimId, this.args.fromClaim(v));
    }
    async call() {
        const res = new GetClaimResults();
        await this.callView("getClaim", this.args, res);
        return res;
    }
}
exports.GetClaimView = GetClaimView;
class GetClaimResults extends wasmclient.Results {
    claim() {
        return Claim.fromBytes(this.get(ResClaim));
    }
}
exports.GetClaimResults = GetClaimResults;
///////////////////////////// getClaims /////////////////////////////
class GetClaimsView extends wasmclient.ClientView {
    async call() {
        const res = new GetClaimsResults();
        await this.callView("getClaims", null, res);
        return res;
    }
}
exports.GetClaimsView = GetClaimsView;
class GetClaimsResults extends wasmclient.Results {
    claims() {
        return Claim.fromBytes(this.get(ResClaims));
    }
}
exports.GetClaimsResults = GetClaimsResults;
///////////////////////////// getOwner /////////////////////////////
class GetOwnerView extends wasmclient.ClientView {
    async call() {
        const res = new GetOwnerResults();
        await this.callView("getOwner", null, res);
        return res;
    }
}
exports.GetOwnerView = GetOwnerView;
class GetOwnerResults extends wasmclient.Results {
    owner() {
        return this.toAgentID(this.get(ResOwner));
    }
}
exports.GetOwnerResults = GetOwnerResults;
///////////////////////////// getPlant /////////////////////////////
class GetPlantView extends wasmclient.ClientView {
    args = new wasmclient.Arguments();
    plantId(v) {
        this.args.set(ArgPlantId, this.args.fromHash(v));
    }
    async call() {
        this.args.mandatory(ArgPlantId);
        const res = new GetPlantResults();
        await this.callView("getPlant", this.args, res);
        return res;
    }
}
exports.GetPlantView = GetPlantView;
class GetPlantResults extends wasmclient.Results {
    plant() {
        return Plant.fromBytes(this.get(ResPlant));
    }
}
exports.GetPlantResults = GetPlantResults;
///////////////////////////// getPlantOracles /////////////////////////////
class GetPlantOraclesView extends wasmclient.ClientView {
    async call() {
        const res = new GetPlantOraclesResults();
        await this.callView("getPlantOracles", null, res);
        return res;
    }
}
exports.GetPlantOraclesView = GetPlantOraclesView;
class GetPlantOraclesResults extends wasmclient.Results {
    oracles() {
        return this.toAgentID(this.get(ResOracles));
    }
}
exports.GetPlantOraclesResults = GetPlantOraclesResults;
///////////////////////////// getPlants /////////////////////////////
class GetPlantsView extends wasmclient.ClientView {
    async call() {
        const res = new GetPlantsResults();
        await this.callView("getPlants", null, res);
        return res;
    }
}
exports.GetPlantsView = GetPlantsView;
class GetPlantsResults extends wasmclient.Results {
    plants() {
        return Plant.fromBytes(this.get(ResPlants));
    }
}
exports.GetPlantsResults = GetPlantsResults;
///////////////////////////// getPlantsFromOwner /////////////////////////////
class GetPlantsFromOwnerView extends wasmclient.ClientView {
    args = new wasmclient.Arguments();
    ownerId(v) {
        this.args.set(ArgOwnerId, this.args.fromAgentID(v));
    }
    async call() {
        this.args.mandatory(ArgOwnerId);
        const res = new GetPlantsFromOwnerResults();
        await this.callView("getPlantsFromOwner", this.args, res);
        return res;
    }
}
exports.GetPlantsFromOwnerView = GetPlantsFromOwnerView;
class GetPlantsFromOwnerResults extends wasmclient.Results {
    plants() {
        return Plant.fromBytes(this.get(ResPlants));
    }
}
exports.GetPlantsFromOwnerResults = GetPlantsFromOwnerResults;
///////////////////////////// getWeatherOracles /////////////////////////////
class GetWeatherOraclesView extends wasmclient.ClientView {
    async call() {
        const res = new GetWeatherOraclesResults();
        await this.callView("getWeatherOracles", null, res);
        return res;
    }
}
exports.GetWeatherOraclesView = GetWeatherOraclesView;
class GetWeatherOraclesResults extends wasmclient.Results {
    oracles() {
        return this.toAgentID(this.get(ResOracles));
    }
}
exports.GetWeatherOraclesResults = GetWeatherOraclesResults;
///////////////////////////// isPlantOwner /////////////////////////////
class IsPlantOwnerView extends wasmclient.ClientView {
    args = new wasmclient.Arguments();
    reqOwnerId(v) {
        this.args.set(ArgReqOwnerId, this.args.fromAgentID(v));
    }
    reqPlantId(v) {
        this.args.set(ArgReqPlantId, this.args.fromAgentID(v));
    }
    async call() {
        this.args.mandatory(ArgReqOwnerId);
        this.args.mandatory(ArgReqPlantId);
        const res = new IsPlantOwnerResults();
        await this.callView("isPlantOwner", this.args, res);
        return res;
    }
}
exports.IsPlantOwnerView = IsPlantOwnerView;
class IsPlantOwnerResults extends wasmclient.Results {
    isOwner() {
        return this.toBool(this.get(ResIsOwner));
    }
}
exports.IsPlantOwnerResults = IsPlantOwnerResults;
///////////////////////////// PlantobellyService /////////////////////////////
class PlantobellyService extends wasmclient.Service {
    constructor(cl) {
        super(cl, 0x1eaa52f2);
    }
    newEventHandler() {
        return new events.PlantobellyEvents();
    }
    activatePlantOwner() {
        return new ActivatePlantOwnerFunc(this);
    }
    addPlantFunds() {
        return new AddPlantFundsFunc(this);
    }
    addPlantOracle() {
        return new AddPlantOracleFunc(this);
    }
    addWeatherOracle() {
        return new AddWeatherOracleFunc(this);
    }
    claimWatering() {
        return new ClaimWateringFunc(this);
    }
    editOwnPlant() {
        return new EditOwnPlantFunc(this);
    }
    init() {
        return new InitFunc(this);
    }
    interruptWeatherEvent() {
        return new InterruptWeatherEventFunc(this);
    }
    mintPlant() {
        return new MintPlantFunc(this);
    }
    mintPlantRaw() {
        return new MintPlantRawFunc(this);
    }
    payClaimer() {
        return new PayClaimerFunc(this);
    }
    resolveClaim() {
        return new ResolveClaimFunc(this);
    }
    setOwner() {
        return new SetOwnerFunc(this);
    }
    setPlantWater() {
        return new SetPlantWaterFunc(this);
    }
    setPlantWeatherTimeout() {
        return new SetPlantWeatherTimeoutFunc(this);
    }
    getClaim() {
        return new GetClaimView(this);
    }
    getClaims() {
        return new GetClaimsView(this);
    }
    getOwner() {
        return new GetOwnerView(this);
    }
    getPlant() {
        return new GetPlantView(this);
    }
    getPlantOracles() {
        return new GetPlantOraclesView(this);
    }
    getPlants() {
        return new GetPlantsView(this);
    }
    getPlantsFromOwner() {
        return new GetPlantsFromOwnerView(this);
    }
    getWeatherOracles() {
        return new GetWeatherOraclesView(this);
    }
    isPlantOwner() {
        return new IsPlantOwnerView(this);
    }
}
exports.PlantobellyService = PlantobellyService;

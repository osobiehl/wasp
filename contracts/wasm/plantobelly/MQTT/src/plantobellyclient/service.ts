// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "wasmclient"
import * as events from "./events"

const ArgActive = "active";
const ArgActiveReason = "activeReason";
const ArgAmount = "amount";
const ArgClaimed = "claimed";
const ArgCovered = "covered";
const ArgCurrentWater = "currentWater";
const ArgDescription = "description";
const ArgDuration = "duration";
const ArgFunds = "funds";
const ArgId = "id";
const ArgLattitude = "lattitude";
const ArgLocation = "location";
const ArgLongitude = "longitude";
const ArgManufacturer = "manufacturer";
const ArgMintClaimId = "mintClaimId";
const ArgName = "name";
const ArgNewPlant = "newPlant";
const ArgNewState = "newState";
const ArgOracleId = "oracleId";
const ArgOwner = "owner";
const ArgOwnerId = "ownerId";
const ArgPayReward = "payReward";
const ArgPlantId = "plantId";
const ArgReqClaimId = "reqClaimId";
const ArgReqOwnerId = "reqOwnerId";
const ArgReqPlantId = "reqPlantId";
const ArgReward = "reward";
const ArgTimeoutDuration = "timeoutDuration";
const ArgTimestamp = "timestamp";
const ArgTo = "to";
const ArgValue = "value";
const ArgWaterLevel = "waterLevel";
const ArgWaterTarget = "waterTarget";
const ArgWaterThreshold = "waterThreshold";

const ResClaim = "claim";
const ResClaims = "claims";
const ResIsOwner = "isOwner";
const ResOracles = "oracles";
const ResOwner = "owner";
const ResPlant = "plant";
const ResPlants = "plants";

///////////////////////////// activatePlantOwner /////////////////////////////

export class ActivatePlantOwnerFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public newState(v: boolean): void {
		this.args.set(ArgNewState, this.args.fromBool(v));
	}
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgNewState);
		this.args.mandatory(ArgPlantId);
		return await super.post(0x666005c8, this.args);
	}
}

///////////////////////////// addPlantFunds /////////////////////////////

export class AddPlantFundsFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public value(v: wasmclient.Uint64): void {
		this.args.set(ArgValue, this.args.fromUint64(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgPlantId);
		this.args.mandatory(ArgValue);
		return await super.post(0xe756567a, this.args);
	}
}

///////////////////////////// addPlantOracle /////////////////////////////

export class AddPlantOracleFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public oracleId(v: wasmclient.AgentID): void {
		this.args.set(ArgOracleId, this.args.fromAgentID(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgOracleId);
		return await super.post(0xca04a73a, this.args);
	}
}

///////////////////////////// addWeatherOracle /////////////////////////////

export class AddWeatherOracleFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public oracleId(v: wasmclient.AgentID): void {
		this.args.set(ArgOracleId, this.args.fromAgentID(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgOracleId);
		return await super.post(0x5f3b8b83, this.args);
	}
}

///////////////////////////// claimWatering /////////////////////////////

export class ClaimWateringFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public timestamp(v: wasmclient.Uint64): void {
		this.args.set(ArgTimestamp, this.args.fromUint64(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgPlantId);
		this.args.mandatory(ArgTimestamp);
		return await super.post(0x1c41f3ed, this.args);
	}
}

///////////////////////////// editOwnPlant /////////////////////////////

export class EditOwnPlantFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public covered(v: boolean): void {
		this.args.set(ArgCovered, this.args.fromBool(v));
	}
	
	public description(v: string): void {
		this.args.set(ArgDescription, this.args.fromString(v));
	}
	
	// public location(v: ): void {
	// 	this.args.set(ArgLocation, this.args.fromGeolocation(v));
	// }
	
	public name(v: string): void {
		this.args.set(ArgName, this.args.fromString(v));
	}
	
	public reward(v: wasmclient.Uint64): void {
		this.args.set(ArgReward, this.args.fromUint64(v));
	}
	
	public waterTarget(v: wasmclient.Int32): void {
		this.args.set(ArgWaterTarget, this.args.fromInt32(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgCovered);
		this.args.mandatory(ArgDescription);
		this.args.mandatory(ArgName);
		this.args.mandatory(ArgReward);
		this.args.mandatory(ArgWaterTarget);
		return await super.post(0xebba038d, this.args);
	}
}

///////////////////////////// init /////////////////////////////

export class InitFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public owner(v: wasmclient.AgentID): void {
		this.args.set(ArgOwner, this.args.fromAgentID(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		return await super.post(0x1f44d644, this.args);
	}
}

///////////////////////////// interruptWeatherEvent /////////////////////////////

export class InterruptWeatherEventFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public duration(v: wasmclient.Uint64): void {
		this.args.set(ArgDuration, this.args.fromUint64(v));
	}
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgDuration);
		this.args.mandatory(ArgPlantId);
		return await super.post(0xc42865d1, this.args);
	}
}

///////////////////////////// mintPlant /////////////////////////////

export class MintPlantFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	// public newPlant(v: ): void {
	// 	this.args.set(ArgNewPlant, this.args.fromPlant(v));
	// }
	
	public async post(): Promise<wasmclient.RequestID> {
		return await super.post(0x6aeb84a1, this.args);
	}
}

///////////////////////////// mintPlantRaw /////////////////////////////

export class MintPlantRawFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public active(v: boolean): void {
		this.args.set(ArgActive, this.args.fromBool(v));
	}
	
	public activeReason(v: wasmclient.Uint32): void {
		this.args.set(ArgActiveReason, this.args.fromUint32(v));
	}
	
	public claimed(v: boolean): void {
		this.args.set(ArgClaimed, this.args.fromBool(v));
	}
	
	public covered(v: boolean): void {
		this.args.set(ArgCovered, this.args.fromBool(v));
	}
	
	public currentWater(v: wasmclient.Int32): void {
		this.args.set(ArgCurrentWater, this.args.fromInt32(v));
	}
	
	public description(v: string): void {
		this.args.set(ArgDescription, this.args.fromString(v));
	}
	
	public funds(v: wasmclient.Uint64): void {
		this.args.set(ArgFunds, this.args.fromUint64(v));
	}
	
	public id(v: wasmclient.Hash): void {
		this.args.set(ArgId, this.args.fromHash(v));
	}
	
	public lattitude(v: string): void {
		this.args.set(ArgLattitude, this.args.fromString(v));
	}
	
	public longitude(v: string): void {
		this.args.set(ArgLongitude, this.args.fromString(v));
	}
	
	public manufacturer(v: wasmclient.AgentID): void {
		this.args.set(ArgManufacturer, this.args.fromAgentID(v));
	}
	
	public mintClaimId(v: wasmclient.Hash): void {
		this.args.set(ArgMintClaimId, this.args.fromHash(v));
	}
	
	public name(v: string): void {
		this.args.set(ArgName, this.args.fromString(v));
	}
	
	public owner(v: wasmclient.AgentID): void {
		this.args.set(ArgOwner, this.args.fromAgentID(v));
	}
	
	public payReward(v: wasmclient.Uint64): void {
		this.args.set(ArgPayReward, this.args.fromUint64(v));
	}
	
	public waterTarget(v: wasmclient.Int32): void {
		this.args.set(ArgWaterTarget, this.args.fromInt32(v));
	}
	
	public waterThreshold(v: wasmclient.Int32): void {
		this.args.set(ArgWaterThreshold, this.args.fromInt32(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgActive);
		this.args.mandatory(ArgActiveReason);
		this.args.mandatory(ArgClaimed);
		this.args.mandatory(ArgCovered);
		this.args.mandatory(ArgCurrentWater);
		this.args.mandatory(ArgDescription);
		this.args.mandatory(ArgFunds);
		this.args.mandatory(ArgId);
		this.args.mandatory(ArgLattitude);
		this.args.mandatory(ArgLongitude);
		this.args.mandatory(ArgManufacturer);
		this.args.mandatory(ArgMintClaimId);
		this.args.mandatory(ArgName);
		this.args.mandatory(ArgOwner);
		this.args.mandatory(ArgPayReward);
		this.args.mandatory(ArgWaterTarget);
		this.args.mandatory(ArgWaterThreshold);
		return await super.post(0x7b8d3bec, this.args);
	}
}

///////////////////////////// payClaimer /////////////////////////////

export class PayClaimerFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public amount(v: wasmclient.Uint64): void {
		this.args.set(ArgAmount, this.args.fromUint64(v));
	}
	
	public to(v: wasmclient.AgentID): void {
		this.args.set(ArgTo, this.args.fromAgentID(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgAmount);
		this.args.mandatory(ArgTo);
		return await super.post(0x2c37ad88, this.args);
	}
}

///////////////////////////// resolveClaim /////////////////////////////

export class ResolveClaimFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public id(v: wasmclient.Hash): void {
		this.args.set(ArgId, this.args.fromHash(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgId);
		return await super.post(0x302e03fa, this.args);
	}
}

///////////////////////////// setOwner /////////////////////////////

export class SetOwnerFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public owner(v: wasmclient.AgentID): void {
		this.args.set(ArgOwner, this.args.fromAgentID(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgOwner);
		return await super.post(0x2a15fe7b, this.args);
	}
}

///////////////////////////// setPlantWater /////////////////////////////

export class SetPlantWaterFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public waterLevel(v: wasmclient.Int32): void {
		this.args.set(ArgWaterLevel, this.args.fromInt32(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgPlantId);
		this.args.mandatory(ArgWaterLevel);
		return await super.post(0x6a4d53e6, this.args);
	}
}

///////////////////////////// setPlantWeatherTimeout /////////////////////////////

export class SetPlantWeatherTimeoutFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}
	
	public timeoutDuration(v: boolean): void {
		this.args.set(ArgTimeoutDuration, this.args.fromBool(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgPlantId);
		this.args.mandatory(ArgTimeoutDuration);
		return await super.post(0x6f912118, this.args);
	}
}

///////////////////////////// getClaim /////////////////////////////

export class GetClaimView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public reqClaimId(v: ): void {
		this.args.set(ArgReqClaimId, this.args.fromClaim(v));
	}

	public async call(): Promise<GetClaimResults> {
		const res = new GetClaimResults();
		await this.callView("getClaim", this.args, res);
		return res;
	}
}

export class GetClaimResults extends wasmclient.Results {

	claim(): Claim {
		return Claim.fromBytes(this.get(ResClaim));
	}
}

///////////////////////////// getClaims /////////////////////////////

export class GetClaimsView extends wasmclient.ClientView {

	public async call(): Promise<GetClaimsResults> {
		const res = new GetClaimsResults();
		await this.callView("getClaims", null, res);
		return res;
	}
}

export class GetClaimsResults extends wasmclient.Results {

	claims(): Claim {
		return Claim.fromBytes(this.get(ResClaims));
	}
}

///////////////////////////// getOwner /////////////////////////////

export class GetOwnerView extends wasmclient.ClientView {

	public async call(): Promise<GetOwnerResults> {
		const res = new GetOwnerResults();
		await this.callView("getOwner", null, res);
		return res;
	}
}

export class GetOwnerResults extends wasmclient.Results {

	owner(): wasmclient.AgentID {
		return this.toAgentID(this.get(ResOwner));
	}
}

///////////////////////////// getPlant /////////////////////////////

export class GetPlantView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public plantId(v: wasmclient.Hash): void {
		this.args.set(ArgPlantId, this.args.fromHash(v));
	}

	public async call(): Promise<GetPlantResults> {
		this.args.mandatory(ArgPlantId);
		const res = new GetPlantResults();
		await this.callView("getPlant", this.args, res);
		return res;
	}
}

export class GetPlantResults extends wasmclient.Results {

	plant(): Plant {
		return Plant.fromBytes(this.get(ResPlant));
	}
}

///////////////////////////// getPlantOracles /////////////////////////////

export class GetPlantOraclesView extends wasmclient.ClientView {

	public async call(): Promise<GetPlantOraclesResults> {
		const res = new GetPlantOraclesResults();
		await this.callView("getPlantOracles", null, res);
		return res;
	}
}

export class GetPlantOraclesResults extends wasmclient.Results {

	oracles(): wasmclient.AgentID {
		return this.toAgentID(this.get(ResOracles));
	}
}

///////////////////////////// getPlants /////////////////////////////

export class GetPlantsView extends wasmclient.ClientView {

	public async call(): Promise<GetPlantsResults> {
		const res = new GetPlantsResults();
		await this.callView("getPlants", null, res);
		return res;
	}
}

export class GetPlantsResults extends wasmclient.Results {

	plants(): Plant {
		return Plant.fromBytes(this.get(ResPlants));
	}
}

///////////////////////////// getPlantsFromOwner /////////////////////////////

export class GetPlantsFromOwnerView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public ownerId(v: wasmclient.AgentID): void {
		this.args.set(ArgOwnerId, this.args.fromAgentID(v));
	}

	public async call(): Promise<GetPlantsFromOwnerResults> {
		this.args.mandatory(ArgOwnerId);
		const res = new GetPlantsFromOwnerResults();
		await this.callView("getPlantsFromOwner", this.args, res);
		return res;
	}
}

export class GetPlantsFromOwnerResults extends wasmclient.Results {

	plants(): Plant {
		return Plant.fromBytes(this.get(ResPlants));
	}
}

///////////////////////////// getWeatherOracles /////////////////////////////

export class GetWeatherOraclesView extends wasmclient.ClientView {

	public async call(): Promise<GetWeatherOraclesResults> {
		const res = new GetWeatherOraclesResults();
		await this.callView("getWeatherOracles", null, res);
		return res;
	}
}

export class GetWeatherOraclesResults extends wasmclient.Results {

	oracles(): wasmclient.AgentID {
		return this.toAgentID(this.get(ResOracles));
	}
}

///////////////////////////// isPlantOwner /////////////////////////////

export class IsPlantOwnerView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public reqOwnerId(v: wasmclient.AgentID): void {
		this.args.set(ArgReqOwnerId, this.args.fromAgentID(v));
	}
	
	public reqPlantId(v: wasmclient.AgentID): void {
		this.args.set(ArgReqPlantId, this.args.fromAgentID(v));
	}

	public async call(): Promise<IsPlantOwnerResults> {
		this.args.mandatory(ArgReqOwnerId);
		this.args.mandatory(ArgReqPlantId);
		const res = new IsPlantOwnerResults();
		await this.callView("isPlantOwner", this.args, res);
		return res;
	}
}

export class IsPlantOwnerResults extends wasmclient.Results {

	isOwner(): boolean {
		return this.toBool(this.get(ResIsOwner));
	}
}

///////////////////////////// PlantobellyService /////////////////////////////

export class PlantobellyService extends wasmclient.Service {

	public constructor(cl: wasmclient.ServiceClient) {
		super(cl, 0x1eaa52f2);
	}

	public newEventHandler(): events.PlantobellyEvents {
		return new events.PlantobellyEvents();
	}

	public activatePlantOwner(): ActivatePlantOwnerFunc {
		return new ActivatePlantOwnerFunc(this);
	}

	public addPlantFunds(): AddPlantFundsFunc {
		return new AddPlantFundsFunc(this);
	}

	public addPlantOracle(): AddPlantOracleFunc {
		return new AddPlantOracleFunc(this);
	}

	public addWeatherOracle(): AddWeatherOracleFunc {
		return new AddWeatherOracleFunc(this);
	}

	public claimWatering(): ClaimWateringFunc {
		return new ClaimWateringFunc(this);
	}

	public editOwnPlant(): EditOwnPlantFunc {
		return new EditOwnPlantFunc(this);
	}

	public init(): InitFunc {
		return new InitFunc(this);
	}

	public interruptWeatherEvent(): InterruptWeatherEventFunc {
		return new InterruptWeatherEventFunc(this);
	}

	public mintPlant(): MintPlantFunc {
		return new MintPlantFunc(this);
	}

	public mintPlantRaw(): MintPlantRawFunc {
		return new MintPlantRawFunc(this);
	}

	public payClaimer(): PayClaimerFunc {
		return new PayClaimerFunc(this);
	}

	public resolveClaim(): ResolveClaimFunc {
		return new ResolveClaimFunc(this);
	}

	public setOwner(): SetOwnerFunc {
		return new SetOwnerFunc(this);
	}

	public setPlantWater(): SetPlantWaterFunc {
		return new SetPlantWaterFunc(this);
	}

	public setPlantWeatherTimeout(): SetPlantWeatherTimeoutFunc {
		return new SetPlantWeatherTimeoutFunc(this);
	}

	public getClaim(): GetClaimView {
		return new GetClaimView(this);
	}

	public getClaims(): GetClaimsView {
		return new GetClaimsView(this);
	}

	public getOwner(): GetOwnerView {
		return new GetOwnerView(this);
	}

	public getPlant(): GetPlantView {
		return new GetPlantView(this);
	}

	public getPlantOracles(): GetPlantOraclesView {
		return new GetPlantOraclesView(this);
	}

	public getPlants(): GetPlantsView {
		return new GetPlantsView(this);
	}

	public getPlantsFromOwner(): GetPlantsFromOwnerView {
		return new GetPlantsFromOwnerView(this);
	}

	public getWeatherOracles(): GetWeatherOraclesView {
		return new GetWeatherOraclesView(this);
	}

	public isPlantOwner(): IsPlantOwnerView {
		return new IsPlantOwnerView(this);
	}
}

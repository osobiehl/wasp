// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:gocritic
package plantobelly

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type plantobellyEvents struct {
}

func (e plantobellyEvents) Claim(claimer wasmtypes.ScAgentID, id wasmtypes.ScHash, plantId wasmtypes.ScHash) {
	evt := wasmlib.NewEventEncoder("plantobelly.claim")
	evt.Encode(wasmtypes.AgentIDToString(claimer))
	evt.Encode(wasmtypes.HashToString(id))
	evt.Encode(wasmtypes.HashToString(plantId))
	evt.Emit()
}

func (e plantobellyEvents) Mint(balance uint64, owner wasmtypes.ScAgentID, tokenId wasmtypes.ScHash) {
	evt := wasmlib.NewEventEncoder("plantobelly.mint")
	evt.Encode(wasmtypes.Uint64ToString(balance))
	evt.Encode(wasmtypes.AgentIDToString(owner))
	evt.Encode(wasmtypes.HashToString(tokenId))
	evt.Emit()
}

func (e plantobellyEvents) Resolution(claimer wasmtypes.ScAgentID, plantId wasmtypes.ScHash, result uint32, reward uint64) {
	evt := wasmlib.NewEventEncoder("plantobelly.resolution")
	evt.Encode(wasmtypes.AgentIDToString(claimer))
	evt.Encode(wasmtypes.HashToString(plantId))
	evt.Encode(wasmtypes.Uint32ToString(result))
	evt.Encode(wasmtypes.Uint64ToString(reward))
	evt.Emit()
}

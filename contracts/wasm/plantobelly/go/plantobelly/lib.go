// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package plantobelly

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncActivatePlantOwner,
    	FuncAddPlantFunds,
    	FuncAddPlantOracle,
    	FuncAddWeatherOracle,
    	FuncClaimWatering,
    	FuncEditOwnPlant,
    	FuncInit,
    	FuncInterruptWeatherEvent,
    	FuncMintPlant,
    	FuncMintPlantRaw,
    	FuncPayClaimer,
    	FuncResolveClaim,
    	FuncSetOwner,
    	FuncSetPlantWater,
    	FuncSetPlantWeatherTimeout,
    	ViewGetClaim,
    	ViewGetClaims,
    	ViewGetOwner,
    	ViewGetPlant,
    	ViewGetPlantOracles,
    	ViewGetPlants,
    	ViewGetPlantsFromOwner,
    	ViewGetWeatherOracles,
    	ViewIsPlantOwner,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcActivatePlantOwnerThunk,
    	funcAddPlantFundsThunk,
    	funcAddPlantOracleThunk,
    	funcAddWeatherOracleThunk,
    	funcClaimWateringThunk,
    	funcEditOwnPlantThunk,
    	funcInitThunk,
    	funcInterruptWeatherEventThunk,
    	funcMintPlantThunk,
    	funcMintPlantRawThunk,
    	funcPayClaimerThunk,
    	funcResolveClaimThunk,
    	funcSetOwnerThunk,
    	funcSetPlantWaterThunk,
    	funcSetPlantWeatherTimeoutThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetClaimThunk,
    	viewGetClaimsThunk,
    	viewGetOwnerThunk,
    	viewGetPlantThunk,
    	viewGetPlantOraclesThunk,
    	viewGetPlantsThunk,
    	viewGetPlantsFromOwnerThunk,
    	viewGetWeatherOraclesThunk,
    	viewIsPlantOwnerThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type ActivatePlantOwnerContext struct {
	Events  plantobellyEvents
	Params  ImmutableActivatePlantOwnerParams
	State   MutableplantobellyState
}

func funcActivatePlantOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcActivatePlantOwner")
	f := &ActivatePlantOwnerContext{
		Params: ImmutableActivatePlantOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.NewState().Exists(), "missing mandatory newState")
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	funcActivatePlantOwner(ctx, f)
	ctx.Log("plantobelly.funcActivatePlantOwner ok")
}

type AddPlantFundsContext struct {
	Events  plantobellyEvents
	Params  ImmutableAddPlantFundsParams
	State   MutableplantobellyState
}

func funcAddPlantFundsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcAddPlantFunds")
	f := &AddPlantFundsContext{
		Params: ImmutableAddPlantFundsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	ctx.Require(f.Params.Value().Exists(), "missing mandatory value")
	funcAddPlantFunds(ctx, f)
	ctx.Log("plantobelly.funcAddPlantFunds ok")
}

type AddPlantOracleContext struct {
	Events  plantobellyEvents
	Params  ImmutableAddPlantOracleParams
	State   MutableplantobellyState
}

func funcAddPlantOracleThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcAddPlantOracle")
	f := &AddPlantOracleContext{
		Params: ImmutableAddPlantOracleParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.OracleId().Exists(), "missing mandatory oracleId")
	funcAddPlantOracle(ctx, f)
	ctx.Log("plantobelly.funcAddPlantOracle ok")
}

type AddWeatherOracleContext struct {
	Events  plantobellyEvents
	Params  ImmutableAddWeatherOracleParams
	State   MutableplantobellyState
}

func funcAddWeatherOracleThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcAddWeatherOracle")
	f := &AddWeatherOracleContext{
		Params: ImmutableAddWeatherOracleParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.OracleId().Exists(), "missing mandatory oracleId")
	funcAddWeatherOracle(ctx, f)
	ctx.Log("plantobelly.funcAddWeatherOracle ok")
}

type ClaimWateringContext struct {
	Events  plantobellyEvents
	Params  ImmutableClaimWateringParams
	State   MutableplantobellyState
}

func funcClaimWateringThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcClaimWatering")
	f := &ClaimWateringContext{
		Params: ImmutableClaimWateringParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	ctx.Require(f.Params.Timestamp().Exists(), "missing mandatory timestamp")
	funcClaimWatering(ctx, f)
	ctx.Log("plantobelly.funcClaimWatering ok")
}

type EditOwnPlantContext struct {
	Events  plantobellyEvents
	Params  ImmutableEditOwnPlantParams
	State   MutableplantobellyState
}

func funcEditOwnPlantThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcEditOwnPlant")
	f := &EditOwnPlantContext{
		Params: ImmutableEditOwnPlantParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Covered().Exists(), "missing mandatory covered")
	ctx.Require(f.Params.Description().Exists(), "missing mandatory description")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.Reward().Exists(), "missing mandatory reward")
	ctx.Require(f.Params.WaterTarget().Exists(), "missing mandatory waterTarget")
	funcEditOwnPlant(ctx, f)
	ctx.Log("plantobelly.funcEditOwnPlant ok")
}

type InitContext struct {
	Events  plantobellyEvents
	Params  ImmutableInitParams
	State   MutableplantobellyState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("plantobelly.funcInit ok")
}

type InterruptWeatherEventContext struct {
	Events  plantobellyEvents
	Params  ImmutableInterruptWeatherEventParams
	State   MutableplantobellyState
}

func funcInterruptWeatherEventThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcInterruptWeatherEvent")
	f := &InterruptWeatherEventContext{
		Params: ImmutableInterruptWeatherEventParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Duration().Exists(), "missing mandatory duration")
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	funcInterruptWeatherEvent(ctx, f)
	ctx.Log("plantobelly.funcInterruptWeatherEvent ok")
}

type MintPlantContext struct {
	Events  plantobellyEvents
	Params  ImmutableMintPlantParams
	State   MutableplantobellyState
}

func funcMintPlantThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcMintPlant")
	f := &MintPlantContext{
		Params: ImmutableMintPlantParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	funcMintPlant(ctx, f)
	ctx.Log("plantobelly.funcMintPlant ok")
}

type MintPlantRawContext struct {
	Events  plantobellyEvents
	Params  ImmutableMintPlantRawParams
	State   MutableplantobellyState
}

func funcMintPlantRawThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcMintPlantRaw")
	f := &MintPlantRawContext{
		Params: ImmutableMintPlantRawParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Active().Exists(), "missing mandatory active")
	ctx.Require(f.Params.ActiveReason().Exists(), "missing mandatory activeReason")
	ctx.Require(f.Params.Claimed().Exists(), "missing mandatory claimed")
	ctx.Require(f.Params.Covered().Exists(), "missing mandatory covered")
	ctx.Require(f.Params.CurrentWater().Exists(), "missing mandatory currentWater")
	ctx.Require(f.Params.Description().Exists(), "missing mandatory description")
	ctx.Require(f.Params.Funds().Exists(), "missing mandatory funds")
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	ctx.Require(f.Params.Lattitude().Exists(), "missing mandatory lattitude")
	ctx.Require(f.Params.Longitude().Exists(), "missing mandatory longitude")
	ctx.Require(f.Params.Manufacturer().Exists(), "missing mandatory manufacturer")
	ctx.Require(f.Params.MintClaimId().Exists(), "missing mandatory mintClaimId")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	ctx.Require(f.Params.PayReward().Exists(), "missing mandatory payReward")
	ctx.Require(f.Params.WaterTarget().Exists(), "missing mandatory waterTarget")
	ctx.Require(f.Params.WaterThreshold().Exists(), "missing mandatory waterThreshold")
	funcMintPlantRaw(ctx, f)
	ctx.Log("plantobelly.funcMintPlantRaw ok")
}

type PayClaimerContext struct {
	Events  plantobellyEvents
	Params  ImmutablePayClaimerParams
	State   MutableplantobellyState
}

func funcPayClaimerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcPayClaimer")
	f := &PayClaimerContext{
		Params: ImmutablePayClaimerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(ctx.Caller() == ctx.AccountID(), "no permission")

	ctx.Require(f.Params.Amount().Exists(), "missing mandatory amount")
	ctx.Require(f.Params.To().Exists(), "missing mandatory to")
	funcPayClaimer(ctx, f)
	ctx.Log("plantobelly.funcPayClaimer ok")
}

type ResolveClaimContext struct {
	Events  plantobellyEvents
	Params  ImmutableResolveClaimParams
	State   MutableplantobellyState
}

func funcResolveClaimThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcResolveClaim")
	f := &ResolveClaimContext{
		Params: ImmutableResolveClaimParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// internal claim resolution function, resolving a resolved claim is defined behaviour
	ctx.Require(ctx.Caller() == ctx.AccountID(), "no permission")

	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	funcResolveClaim(ctx, f)
	ctx.Log("plantobelly.funcResolveClaim ok")
}

type SetOwnerContext struct {
	Events  plantobellyEvents
	Params  ImmutableSetOwnerParams
	State   MutableplantobellyState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("plantobelly.funcSetOwner ok")
}

type SetPlantWaterContext struct {
	Events  plantobellyEvents
	Params  ImmutableSetPlantWaterParams
	State   MutableplantobellyState
}

func funcSetPlantWaterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcSetPlantWater")
	f := &SetPlantWaterContext{
		Params: ImmutableSetPlantWaterParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	ctx.Require(f.Params.WaterLevel().Exists(), "missing mandatory waterLevel")
	funcSetPlantWater(ctx, f)
	ctx.Log("plantobelly.funcSetPlantWater ok")
}

type SetPlantWeatherTimeoutContext struct {
	Events  plantobellyEvents
	Params  ImmutableSetPlantWeatherTimeoutParams
	State   MutableplantobellyState
}

func funcSetPlantWeatherTimeoutThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("plantobelly.funcSetPlantWeatherTimeout")
	f := &SetPlantWeatherTimeoutContext{
		Params: ImmutableSetPlantWeatherTimeoutParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	ctx.Require(f.Params.TimeoutDuration().Exists(), "missing mandatory timeoutDuration")
	funcSetPlantWeatherTimeout(ctx, f)
	ctx.Log("plantobelly.funcSetPlantWeatherTimeout ok")
}

type GetClaimContext struct {
	Params  ImmutableGetClaimParams
	Results MutableGetClaimResults
	State   ImmutableplantobellyState
}

func viewGetClaimThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetClaim")
	results := wasmlib.NewScDict()
	f := &GetClaimContext{
		Params: ImmutableGetClaimParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetClaimResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetClaim(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetClaim ok")
}

type GetClaimsContext struct {
	Results MutableGetClaimsResults
	State   ImmutableplantobellyState
}

func viewGetClaimsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetClaims")
	results := wasmlib.NewScDict()
	f := &GetClaimsContext{
		Results: MutableGetClaimsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetClaims(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetClaims ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutableplantobellyState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetOwner ok")
}

type GetPlantContext struct {
	Params  ImmutableGetPlantParams
	Results MutableGetPlantResults
	State   ImmutableplantobellyState
}

func viewGetPlantThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetPlant")
	results := wasmlib.NewScDict()
	f := &GetPlantContext{
		Params: ImmutableGetPlantParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPlantResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlantId().Exists(), "missing mandatory plantId")
	viewGetPlant(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetPlant ok")
}

type GetPlantOraclesContext struct {
	Results MutableGetPlantOraclesResults
	State   ImmutableplantobellyState
}

func viewGetPlantOraclesThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetPlantOracles")
	results := wasmlib.NewScDict()
	f := &GetPlantOraclesContext{
		Results: MutableGetPlantOraclesResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetPlantOracles(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetPlantOracles ok")
}

type GetPlantsContext struct {
	Results MutableGetPlantsResults
	State   ImmutableplantobellyState
}

func viewGetPlantsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetPlants")
	results := wasmlib.NewScDict()
	f := &GetPlantsContext{
		Results: MutableGetPlantsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetPlants(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetPlants ok")
}

type GetPlantsFromOwnerContext struct {
	Params  ImmutableGetPlantsFromOwnerParams
	Results MutableGetPlantsFromOwnerResults
	State   ImmutableplantobellyState
}

func viewGetPlantsFromOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetPlantsFromOwner")
	results := wasmlib.NewScDict()
	f := &GetPlantsFromOwnerContext{
		Params: ImmutableGetPlantsFromOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPlantsFromOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.OwnerId().Exists(), "missing mandatory ownerId")
	viewGetPlantsFromOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetPlantsFromOwner ok")
}

type GetWeatherOraclesContext struct {
	Results MutableGetWeatherOraclesResults
	State   ImmutableplantobellyState
}

func viewGetWeatherOraclesThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewGetWeatherOracles")
	results := wasmlib.NewScDict()
	f := &GetWeatherOraclesContext{
		Results: MutableGetWeatherOraclesResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetWeatherOracles(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewGetWeatherOracles ok")
}

type IsPlantOwnerContext struct {
	Params  ImmutableIsPlantOwnerParams
	Results MutableIsPlantOwnerResults
	State   ImmutableplantobellyState
}

func viewIsPlantOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("plantobelly.viewIsPlantOwner")
	results := wasmlib.NewScDict()
	f := &IsPlantOwnerContext{
		Params: ImmutableIsPlantOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableIsPlantOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableplantobellyState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ReqOwnerId().Exists(), "missing mandatory reqOwnerId")
	ctx.Require(f.Params.ReqPlantId().Exists(), "missing mandatory reqPlantId")
	viewIsPlantOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("plantobelly.viewIsPlantOwner ok")
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobelly

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ImmutableGetClaimResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetClaimResults) Claim() ImmutableClaim {
	return ImmutableClaim{proxy: s.proxy.Root(ResultClaim)}
}

type MutableGetClaimResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetClaimResults) Claim() MutableClaim {
	return MutableClaim{proxy: s.proxy.Root(ResultClaim)}
}

type ArrayOfImmutableClaim struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableClaim) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfImmutableClaim) GetClaim(index uint32) ImmutableClaim {
	return ImmutableClaim{proxy: a.proxy.Index(index)}
}

type ImmutableGetClaimsResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetClaimsResults) Claims() ArrayOfImmutableClaim {
	return ArrayOfImmutableClaim{proxy: s.proxy.Root(ResultClaims)}
}

type ArrayOfMutableClaim struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfMutableClaim) AppendClaim() MutableClaim {
	return MutableClaim{proxy: a.proxy.Append()}
}

func (a ArrayOfMutableClaim) Clear() {
	a.proxy.ClearArray()
}

func (a ArrayOfMutableClaim) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfMutableClaim) GetClaim(index uint32) MutableClaim {
	return MutableClaim{proxy: a.proxy.Index(index)}
}

type MutableGetClaimsResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetClaimsResults) Claims() ArrayOfMutableClaim {
	return ArrayOfMutableClaim{proxy: s.proxy.Root(ResultClaims)}
}

type ImmutableGetOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetOwnerResults) Owner() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.proxy.Root(ResultOwner))
}

type MutableGetOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetOwnerResults) Owner() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.proxy.Root(ResultOwner))
}

type ImmutableGetPlantResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetPlantResults) Plant() ImmutablePlant {
	return ImmutablePlant{proxy: s.proxy.Root(ResultPlant)}
}

type MutableGetPlantResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetPlantResults) Plant() MutablePlant {
	return MutablePlant{proxy: s.proxy.Root(ResultPlant)}
}

type ArrayOfImmutableAgentID struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableAgentID) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfImmutableAgentID) GetAgentID(index uint32) wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(a.proxy.Index(index))
}

type ImmutableGetPlantOraclesResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetPlantOraclesResults) Oracles() ArrayOfImmutableAgentID {
	return ArrayOfImmutableAgentID{proxy: s.proxy.Root(ResultOracles)}
}

type ArrayOfMutableAgentID struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfMutableAgentID) AppendAgentID() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(a.proxy.Append())
}

func (a ArrayOfMutableAgentID) Clear() {
	a.proxy.ClearArray()
}

func (a ArrayOfMutableAgentID) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfMutableAgentID) GetAgentID(index uint32) wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(a.proxy.Index(index))
}

type MutableGetPlantOraclesResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetPlantOraclesResults) Oracles() ArrayOfMutableAgentID {
	return ArrayOfMutableAgentID{proxy: s.proxy.Root(ResultOracles)}
}

type ImmutableGetPlantsResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetPlantsResults) Plants() ArrayOfImmutablePlant {
	return ArrayOfImmutablePlant{proxy: s.proxy.Root(ResultPlants)}
}

type MutableGetPlantsResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetPlantsResults) Plants() ArrayOfMutablePlant {
	return ArrayOfMutablePlant{proxy: s.proxy.Root(ResultPlants)}
}

type ImmutableGetPlantsFromOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetPlantsFromOwnerResults) Plants() ArrayOfImmutablePlant {
	return ArrayOfImmutablePlant{proxy: s.proxy.Root(ResultPlants)}
}

type MutableGetPlantsFromOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetPlantsFromOwnerResults) Plants() ArrayOfMutablePlant {
	return ArrayOfMutablePlant{proxy: s.proxy.Root(ResultPlants)}
}

type ImmutableGetWeatherOraclesResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetWeatherOraclesResults) Oracles() ArrayOfImmutableAgentID {
	return ArrayOfImmutableAgentID{proxy: s.proxy.Root(ResultOracles)}
}

type MutableGetWeatherOraclesResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetWeatherOraclesResults) Oracles() ArrayOfMutableAgentID {
	return ArrayOfMutableAgentID{proxy: s.proxy.Root(ResultOracles)}
}

type ImmutableIsPlantOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableIsPlantOwnerResults) IsOwner() wasmtypes.ScImmutableBool {
	return wasmtypes.NewScImmutableBool(s.proxy.Root(ResultIsOwner))
}

type MutableIsPlantOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableIsPlantOwnerResults) IsOwner() wasmtypes.ScMutableBool {
	return wasmtypes.NewScMutableBool(s.proxy.Root(ResultIsOwner))
}

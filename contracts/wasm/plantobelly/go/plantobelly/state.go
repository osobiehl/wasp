// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobelly

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type MapHashToImmutableClaim struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableClaim) GetClaim(key wasmtypes.ScHash) ImmutableClaim {
	return ImmutableClaim{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapAgentIDToImmutableIds struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToImmutableIds) GetIds(key wasmtypes.ScAgentID) ImmutableIds {
	return ImmutableIds{proxy: m.proxy.Key(wasmtypes.AgentIDToBytes(key))}
}

type MapHashToImmutablePlant struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutablePlant) GetPlant(key wasmtypes.ScHash) ImmutablePlant {
	return ImmutablePlant{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type ImmutableplantobellyState struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableplantobellyState) AllowedPlantOracles() ArrayOfImmutableAgentID {
	return ArrayOfImmutableAgentID{proxy: s.proxy.Root(StateAllowedPlantOracles)}
}

func (s ImmutableplantobellyState) AllowedWeatherOracles() ArrayOfImmutableAgentID {
	return ArrayOfImmutableAgentID{proxy: s.proxy.Root(StateAllowedWeatherOracles)}
}

func (s ImmutableplantobellyState) ClaimIds() ArrayOfImmutableHash {
	return ArrayOfImmutableHash{proxy: s.proxy.Root(StateClaimIds)}
}

func (s ImmutableplantobellyState) Claims() MapHashToImmutableClaim {
	return MapHashToImmutableClaim{proxy: s.proxy.Root(StateClaims)}
}

func (s ImmutableplantobellyState) OwnedPlants() MapAgentIDToImmutableIds {
	return MapAgentIDToImmutableIds{proxy: s.proxy.Root(StateOwnedPlants)}
}

func (s ImmutableplantobellyState) Owner() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.proxy.Root(StateOwner))
}

func (s ImmutableplantobellyState) PlantIds() ArrayOfImmutableHash {
	return ArrayOfImmutableHash{proxy: s.proxy.Root(StatePlantIds)}
}

func (s ImmutableplantobellyState) PlantOwners() ArrayOfImmutableAgentID {
	return ArrayOfImmutableAgentID{proxy: s.proxy.Root(StatePlantOwners)}
}

func (s ImmutableplantobellyState) Plants() MapHashToImmutablePlant {
	return MapHashToImmutablePlant{proxy: s.proxy.Root(StatePlants)}
}

type MapHashToMutableClaim struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableClaim) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableClaim) GetClaim(key wasmtypes.ScHash) MutableClaim {
	return MutableClaim{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapAgentIDToMutableIds struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToMutableIds) Clear() {
	m.proxy.ClearMap()
}

func (m MapAgentIDToMutableIds) GetIds(key wasmtypes.ScAgentID) MutableIds {
	return MutableIds{proxy: m.proxy.Key(wasmtypes.AgentIDToBytes(key))}
}

type MapHashToMutablePlant struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutablePlant) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutablePlant) GetPlant(key wasmtypes.ScHash) MutablePlant {
	return MutablePlant{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MutableplantobellyState struct {
	proxy wasmtypes.Proxy
}

func (s MutableplantobellyState) AsImmutable() ImmutableplantobellyState {
	return ImmutableplantobellyState(s)
}

func (s MutableplantobellyState) AllowedPlantOracles() ArrayOfMutableAgentID {
	return ArrayOfMutableAgentID{proxy: s.proxy.Root(StateAllowedPlantOracles)}
}

func (s MutableplantobellyState) AllowedWeatherOracles() ArrayOfMutableAgentID {
	return ArrayOfMutableAgentID{proxy: s.proxy.Root(StateAllowedWeatherOracles)}
}

func (s MutableplantobellyState) ClaimIds() ArrayOfMutableHash {
	return ArrayOfMutableHash{proxy: s.proxy.Root(StateClaimIds)}
}

func (s MutableplantobellyState) Claims() MapHashToMutableClaim {
	return MapHashToMutableClaim{proxy: s.proxy.Root(StateClaims)}
}

func (s MutableplantobellyState) OwnedPlants() MapAgentIDToMutableIds {
	return MapAgentIDToMutableIds{proxy: s.proxy.Root(StateOwnedPlants)}
}

func (s MutableplantobellyState) Owner() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.proxy.Root(StateOwner))
}

func (s MutableplantobellyState) PlantIds() ArrayOfMutableHash {
	return ArrayOfMutableHash{proxy: s.proxy.Root(StatePlantIds)}
}

func (s MutableplantobellyState) PlantOwners() ArrayOfMutableAgentID {
	return ArrayOfMutableAgentID{proxy: s.proxy.Root(StatePlantOwners)}
}

func (s MutableplantobellyState) Plants() MapHashToMutablePlant {
	return MapHashToMutablePlant{proxy: s.proxy.Root(StatePlants)}
}

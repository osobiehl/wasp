// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobelly

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type Claim struct {
	Claimer            wasmtypes.ScAgentID 
	Deposit            uint64 
	Id                 wasmtypes.ScHash 
	PlantId            wasmtypes.ScHash 
	RecordedWaterLevel int32 
	Timestamp          uint64 
}

func NewClaimFromBytes(buf []byte) *Claim {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Claim{}
	data.Claimer            = wasmtypes.AgentIDDecode(dec)
	data.Deposit            = wasmtypes.Uint64Decode(dec)
	data.Id                 = wasmtypes.HashDecode(dec)
	data.PlantId            = wasmtypes.HashDecode(dec)
	data.RecordedWaterLevel = wasmtypes.Int32Decode(dec)
	data.Timestamp          = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *Claim) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
		wasmtypes.AgentIDEncode(enc, o.Claimer)
		wasmtypes.Uint64Encode(enc, o.Deposit)
		wasmtypes.HashEncode(enc, o.Id)
		wasmtypes.HashEncode(enc, o.PlantId)
		wasmtypes.Int32Encode(enc, o.RecordedWaterLevel)
		wasmtypes.Uint64Encode(enc, o.Timestamp)
	return enc.Buf()
}

type ImmutableClaim struct {
	proxy wasmtypes.Proxy
}

func (o ImmutableClaim) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutableClaim) Value() *Claim {
	return NewClaimFromBytes(o.proxy.Get())
}

type MutableClaim struct {
	proxy wasmtypes.Proxy
}

func (o MutableClaim) Delete() {
	o.proxy.Delete()
}

func (o MutableClaim) Exists() bool {
	return o.proxy.Exists()
}

func (o MutableClaim) SetValue(value *Claim) {
	o.proxy.Set(value.Bytes())
}

func (o MutableClaim) Value() *Claim {
	return NewClaimFromBytes(o.proxy.Get())
}

type Plant struct {
	Active         bool 
	ActiveReason   uint32  // 0 -> default, 1 -> owner deactivated, 2 -> weather deactivated, 3 -> owner deactivated
	ClaimId        wasmtypes.ScHash  // used to index claims (for scalability purposes)
	Claimed        bool  // whether plant has been claimed
	Covered        bool 
	CurrentWater   int32  // current level of water
	Description    string  // general description of plant
	Funds          uint64 
	Id             wasmtypes.ScHash 
	Lattitude      string  // geolocation structs don't work WOW
	Longitude      string 
	Manufacturer   wasmtypes.ScAgentID  // manufacturer wallet for payment
	Name           string 
	Owner          wasmtypes.ScAgentID  // owner of plant token
	Reward         uint64  // the reward given for watering the plant
	WaterTarget    int32  // level of water
	WaterThreshold int32  // min. level of water to start watering
}

func NewPlantFromBytes(buf []byte) *Plant {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Plant{}
	data.Active         = wasmtypes.BoolDecode(dec)
	data.ActiveReason   = wasmtypes.Uint32Decode(dec)
	data.ClaimId        = wasmtypes.HashDecode(dec)
	data.Claimed        = wasmtypes.BoolDecode(dec)
	data.Covered        = wasmtypes.BoolDecode(dec)
	data.CurrentWater   = wasmtypes.Int32Decode(dec)
	data.Description    = wasmtypes.StringDecode(dec)
	data.Funds          = wasmtypes.Uint64Decode(dec)
	data.Id             = wasmtypes.HashDecode(dec)
	data.Lattitude      = wasmtypes.StringDecode(dec)
	data.Longitude      = wasmtypes.StringDecode(dec)
	data.Manufacturer   = wasmtypes.AgentIDDecode(dec)
	data.Name           = wasmtypes.StringDecode(dec)
	data.Owner          = wasmtypes.AgentIDDecode(dec)
	data.Reward         = wasmtypes.Uint64Decode(dec)
	data.WaterTarget    = wasmtypes.Int32Decode(dec)
	data.WaterThreshold = wasmtypes.Int32Decode(dec)
	dec.Close()
	return data
}

func (o *Plant) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
		wasmtypes.BoolEncode(enc, o.Active)
		wasmtypes.Uint32Encode(enc, o.ActiveReason)
		wasmtypes.HashEncode(enc, o.ClaimId)
		wasmtypes.BoolEncode(enc, o.Claimed)
		wasmtypes.BoolEncode(enc, o.Covered)
		wasmtypes.Int32Encode(enc, o.CurrentWater)
		wasmtypes.StringEncode(enc, o.Description)
		wasmtypes.Uint64Encode(enc, o.Funds)
		wasmtypes.HashEncode(enc, o.Id)
		wasmtypes.StringEncode(enc, o.Lattitude)
		wasmtypes.StringEncode(enc, o.Longitude)
		wasmtypes.AgentIDEncode(enc, o.Manufacturer)
		wasmtypes.StringEncode(enc, o.Name)
		wasmtypes.AgentIDEncode(enc, o.Owner)
		wasmtypes.Uint64Encode(enc, o.Reward)
		wasmtypes.Int32Encode(enc, o.WaterTarget)
		wasmtypes.Int32Encode(enc, o.WaterThreshold)
	return enc.Buf()
}

type ImmutablePlant struct {
	proxy wasmtypes.Proxy
}

func (o ImmutablePlant) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutablePlant) Value() *Plant {
	return NewPlantFromBytes(o.proxy.Get())
}

type MutablePlant struct {
	proxy wasmtypes.Proxy
}

func (o MutablePlant) Delete() {
	o.proxy.Delete()
}

func (o MutablePlant) Exists() bool {
	return o.proxy.Exists()
}

func (o MutablePlant) SetValue(value *Plant) {
	o.proxy.Set(value.Bytes())
}

func (o MutablePlant) Value() *Plant {
	return NewPlantFromBytes(o.proxy.Get())
}

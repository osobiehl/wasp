// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobellyclient

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

var plantobellyHandlers = map[string]func(*PlantobellyEvents, []string) {
	"plantobelly.claim": func(evt *PlantobellyEvents, msg []string) { evt.onPlantobellyClaimThunk(msg) },
	"plantobelly.mint": func(evt *PlantobellyEvents, msg []string) { evt.onPlantobellyMintThunk(msg) },
	"plantobelly.resolution": func(evt *PlantobellyEvents, msg []string) { evt.onPlantobellyResolutionThunk(msg) },
}

type PlantobellyEvents struct {
	claim func(e *EventClaim)
	mint func(e *EventMint)
	resolution func(e *EventResolution)
}

func (h *PlantobellyEvents) CallHandler(topic string, params []string) {
	handler := plantobellyHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *PlantobellyEvents) OnPlantobellyClaim(handler func(e *EventClaim)) {
	h.claim = handler
}

func (h *PlantobellyEvents) OnPlantobellyMint(handler func(e *EventMint)) {
	h.mint = handler
}

func (h *PlantobellyEvents) OnPlantobellyResolution(handler func(e *EventResolution)) {
	h.resolution = handler
}

type EventClaim struct {
	wasmclient.Event
  	Claimer wasmclient.AgentID
  	Id wasmclient.Hash
  	PlantId wasmclient.Hash
}

func (h *PlantobellyEvents) onPlantobellyClaimThunk(message []string) {
    if h.claim == nil {
		return
	}
	e := &EventClaim{}
	e.Init(message)
	e.Claimer = e.NextAgentID()
	e.Id = e.NextHash()
	e.PlantId = e.NextHash()
	h.claim(e)
}

type EventMint struct {
	wasmclient.Event
  	Balance uint64
  	Owner wasmclient.AgentID
  	TokenId wasmclient.Hash
}

func (h *PlantobellyEvents) onPlantobellyMintThunk(message []string) {
    if h.mint == nil {
		return
	}
	e := &EventMint{}
	e.Init(message)
	e.Balance = e.NextUint64()
	e.Owner = e.NextAgentID()
	e.TokenId = e.NextHash()
	h.mint(e)
}

type EventResolution struct {
	wasmclient.Event
  	Claimer wasmclient.AgentID
  	PlantId wasmclient.Hash
  	Result uint32
  	Reward uint64
}

func (h *PlantobellyEvents) onPlantobellyResolutionThunk(message []string) {
    if h.resolution == nil {
		return
	}
	e := &EventResolution{}
	e.Init(message)
	e.Claimer = e.NextAgentID()
	e.PlantId = e.NextHash()
	e.Result = e.NextUint32()
	e.Reward = e.NextUint64()
	h.resolution(e)
}

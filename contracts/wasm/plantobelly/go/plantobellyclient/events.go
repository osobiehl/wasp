// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobellyclient

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

var EventHandlers = map[string]func([]string){
	"plantobelly.claim":      onPlantobellyClaimThunk,
	"plantobelly.mint":       onPlantobellyMintThunk,
	"plantobelly.resolution": onPlantobellyResolutionThunk,
}

type EventClaim struct {
	wasmclient.Event
	Claimer wasmclient.AgentID
	Id      wasmclient.Hash
	PlantId wasmclient.Hash
}

func onPlantobellyClaimThunk(message []string) {
	e := &EventClaim{}
	e.Init(message)
	e.Claimer = e.NextAgentID()
	e.Id = e.NextHash()
	e.PlantId = e.NextHash()
	OnPlantobellyClaim(e)
}

type EventMint struct {
	wasmclient.Event
	Balance int64
	Owner   wasmclient.AgentID
	TokenId wasmclient.Hash
}

func onPlantobellyMintThunk(message []string) {
	e := &EventMint{}
	e.Init(message)
	e.Balance = e.NextInt64()
	e.Owner = e.NextAgentID()
	e.TokenId = e.NextHash()
	OnPlantobellyMint(e)
}

type EventResolution struct {
	wasmclient.Event
	Claimer wasmclient.AgentID
	PlantId wasmclient.Hash
	Result  uint32
	Reward  int64
}

func onPlantobellyResolutionThunk(message []string) {
	e := &EventResolution{}
	e.Init(message)
	e.Claimer = e.NextAgentID()
	e.PlantId = e.NextHash()
	e.Result = e.NextUint32()
	e.Reward = e.NextInt64()
	OnPlantobellyResolution(e)
}

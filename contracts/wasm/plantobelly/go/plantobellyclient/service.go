// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package plantobellyclient

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

const (
	ArgActive = "active"
	ArgActiveReason = "activeReason"
	ArgAmount = "amount"
	ArgClaimed = "claimed"
	ArgCovered = "covered"
	ArgCurrentWater = "currentWater"
	ArgDescription = "description"
	ArgDuration = "duration"
	ArgFunds = "funds"
	ArgId = "id"
	ArgLattitude = "lattitude"
	ArgLongitude = "longitude"
	ArgManufacturer = "manufacturer"
	ArgMintClaimId = "mintClaimId"
	ArgName = "name"
	ArgNewState = "newState"
	ArgOracleId = "oracleId"
	ArgOwner = "owner"
	ArgOwnerId = "ownerId"
	ArgPayReward = "payReward"
	ArgPlantId = "plantId"
	ArgReqClaimId = "reqClaimId"
	ArgReqOwnerId = "reqOwnerId"
	ArgReqPlantId = "reqPlantId"
	ArgReward = "reward"
	ArgTimeoutDuration = "timeoutDuration"
	ArgTimestamp = "timestamp"
	ArgTo = "to"
	ArgValue = "value"
	ArgWaterLevel = "waterLevel"
	ArgWaterTarget = "waterTarget"
	ArgWaterThreshold = "waterThreshold"

	ResActive = "active"
	ResActiveReason = "activeReason"
	ResClaimId = "claimId"
	ResClaimed = "claimed"
	ResClaimer = "claimer"
	ResClaims = "claims"
	ResCovered = "covered"
	ResCurrentWater = "currentWater"
	ResDeposit = "deposit"
	ResDescription = "description"
	ResFunds = "funds"
	ResId = "id"
	ResIsOwner = "isOwner"
	ResLattitude = "lattitude"
	ResLongitude = "longitude"
	ResManufacturer = "manufacturer"
	ResName = "name"
	ResOracles = "oracles"
	ResOwner = "owner"
	ResPlantId = "plantId"
	ResPlants = "plants"
	ResRecordedWaterLevel = "recordedWaterLevel"
	ResReward = "reward"
	ResTimestamp = "timestamp"
	ResWaterTarget = "waterTarget"
	ResWaterThreshold = "waterThreshold"
)

///////////////////////////// activatePlantOwner /////////////////////////////

type ActivatePlantOwnerFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *ActivatePlantOwnerFunc) NewState(v bool) {
	f.args.Set(ArgNewState, f.args.FromBool(v))
}

func (f *ActivatePlantOwnerFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *ActivatePlantOwnerFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgNewState)
	f.args.Mandatory(ArgPlantId)
	return f.ClientFunc.Post(0x666005c8, &f.args)
}

///////////////////////////// addPlantFunds /////////////////////////////

type AddPlantFundsFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *AddPlantFundsFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *AddPlantFundsFunc) Value(v uint64) {
	f.args.Set(ArgValue, f.args.FromUint64(v))
}

func (f *AddPlantFundsFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgPlantId)
	f.args.Mandatory(ArgValue)
	return f.ClientFunc.Post(0xe756567a, &f.args)
}

///////////////////////////// addPlantOracle /////////////////////////////

type AddPlantOracleFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *AddPlantOracleFunc) OracleId(v wasmclient.AgentID) {
	f.args.Set(ArgOracleId, f.args.FromAgentID(v))
}

func (f *AddPlantOracleFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgOracleId)
	return f.ClientFunc.Post(0xca04a73a, &f.args)
}

///////////////////////////// addWeatherOracle /////////////////////////////

type AddWeatherOracleFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *AddWeatherOracleFunc) OracleId(v wasmclient.AgentID) {
	f.args.Set(ArgOracleId, f.args.FromAgentID(v))
}

func (f *AddWeatherOracleFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgOracleId)
	return f.ClientFunc.Post(0x5f3b8b83, &f.args)
}

///////////////////////////// claimWatering /////////////////////////////

type ClaimWateringFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *ClaimWateringFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *ClaimWateringFunc) Timestamp(v uint64) {
	f.args.Set(ArgTimestamp, f.args.FromUint64(v))
}

func (f *ClaimWateringFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgPlantId)
	f.args.Mandatory(ArgTimestamp)
	return f.ClientFunc.Post(0x1c41f3ed, &f.args)
}

///////////////////////////// editOwnPlant /////////////////////////////

type EditOwnPlantFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *EditOwnPlantFunc) Covered(v bool) {
	f.args.Set(ArgCovered, f.args.FromBool(v))
}

func (f *EditOwnPlantFunc) Description(v string) {
	f.args.Set(ArgDescription, f.args.FromString(v))
}

func (f *EditOwnPlantFunc) Lattitude(v string) {
	f.args.Set(ArgLattitude, f.args.FromString(v))
}

func (f *EditOwnPlantFunc) Longitude(v string) {
	f.args.Set(ArgLongitude, f.args.FromString(v))
}

func (f *EditOwnPlantFunc) Name(v string) {
	f.args.Set(ArgName, f.args.FromString(v))
}

func (f *EditOwnPlantFunc) Reward(v uint64) {
	f.args.Set(ArgReward, f.args.FromUint64(v))
}

func (f *EditOwnPlantFunc) WaterTarget(v int32) {
	f.args.Set(ArgWaterTarget, f.args.FromInt32(v))
}

func (f *EditOwnPlantFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgCovered)
	f.args.Mandatory(ArgDescription)
	f.args.Mandatory(ArgLattitude)
	f.args.Mandatory(ArgLongitude)
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgReward)
	f.args.Mandatory(ArgWaterTarget)
	return f.ClientFunc.Post(0xebba038d, &f.args)
}

///////////////////////////// init /////////////////////////////

type InitFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *InitFunc) Owner(v wasmclient.AgentID) {
	f.args.Set(ArgOwner, f.args.FromAgentID(v))
}

func (f *InitFunc) Post() wasmclient.Request {
	return f.ClientFunc.Post(0x1f44d644, &f.args)
}

///////////////////////////// interruptWeatherEvent /////////////////////////////

type InterruptWeatherEventFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *InterruptWeatherEventFunc) Duration(v uint64) {
	f.args.Set(ArgDuration, f.args.FromUint64(v))
}

func (f *InterruptWeatherEventFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *InterruptWeatherEventFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgDuration)
	f.args.Mandatory(ArgPlantId)
	return f.ClientFunc.Post(0xc42865d1, &f.args)
}

///////////////////////////// mintPlantRaw /////////////////////////////

type MintPlantRawFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *MintPlantRawFunc) Active(v bool) {
	f.args.Set(ArgActive, f.args.FromBool(v))
}

func (f *MintPlantRawFunc) ActiveReason(v uint32) {
	f.args.Set(ArgActiveReason, f.args.FromUint32(v))
}

func (f *MintPlantRawFunc) Claimed(v bool) {
	f.args.Set(ArgClaimed, f.args.FromBool(v))
}

func (f *MintPlantRawFunc) Covered(v bool) {
	f.args.Set(ArgCovered, f.args.FromBool(v))
}

func (f *MintPlantRawFunc) CurrentWater(v int32) {
	f.args.Set(ArgCurrentWater, f.args.FromInt32(v))
}

func (f *MintPlantRawFunc) Description(v string) {
	f.args.Set(ArgDescription, f.args.FromString(v))
}

func (f *MintPlantRawFunc) Funds(v uint64) {
	f.args.Set(ArgFunds, f.args.FromUint64(v))
}

func (f *MintPlantRawFunc) Id(v wasmclient.Hash) {
	f.args.Set(ArgId, f.args.FromHash(v))
}

func (f *MintPlantRawFunc) Lattitude(v string) {
	f.args.Set(ArgLattitude, f.args.FromString(v))
}

func (f *MintPlantRawFunc) Longitude(v string) {
	f.args.Set(ArgLongitude, f.args.FromString(v))
}

func (f *MintPlantRawFunc) Manufacturer(v wasmclient.AgentID) {
	f.args.Set(ArgManufacturer, f.args.FromAgentID(v))
}

func (f *MintPlantRawFunc) MintClaimId(v wasmclient.Hash) {
	f.args.Set(ArgMintClaimId, f.args.FromHash(v))
}

func (f *MintPlantRawFunc) Name(v string) {
	f.args.Set(ArgName, f.args.FromString(v))
}

func (f *MintPlantRawFunc) Owner(v wasmclient.AgentID) {
	f.args.Set(ArgOwner, f.args.FromAgentID(v))
}

func (f *MintPlantRawFunc) PayReward(v uint64) {
	f.args.Set(ArgPayReward, f.args.FromUint64(v))
}

func (f *MintPlantRawFunc) WaterTarget(v int32) {
	f.args.Set(ArgWaterTarget, f.args.FromInt32(v))
}

func (f *MintPlantRawFunc) WaterThreshold(v int32) {
	f.args.Set(ArgWaterThreshold, f.args.FromInt32(v))
}

func (f *MintPlantRawFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgActive)
	f.args.Mandatory(ArgActiveReason)
	f.args.Mandatory(ArgClaimed)
	f.args.Mandatory(ArgCovered)
	f.args.Mandatory(ArgCurrentWater)
	f.args.Mandatory(ArgDescription)
	f.args.Mandatory(ArgFunds)
	f.args.Mandatory(ArgId)
	f.args.Mandatory(ArgLattitude)
	f.args.Mandatory(ArgLongitude)
	f.args.Mandatory(ArgManufacturer)
	f.args.Mandatory(ArgMintClaimId)
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgOwner)
	f.args.Mandatory(ArgPayReward)
	f.args.Mandatory(ArgWaterTarget)
	f.args.Mandatory(ArgWaterThreshold)
	return f.ClientFunc.Post(0x7b8d3bec, &f.args)
}

///////////////////////////// payClaimer /////////////////////////////

type PayClaimerFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *PayClaimerFunc) Amount(v uint64) {
	f.args.Set(ArgAmount, f.args.FromUint64(v))
}

func (f *PayClaimerFunc) To(v wasmclient.AgentID) {
	f.args.Set(ArgTo, f.args.FromAgentID(v))
}

func (f *PayClaimerFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgAmount)
	f.args.Mandatory(ArgTo)
	return f.ClientFunc.Post(0x2c37ad88, &f.args)
}

///////////////////////////// resolveClaim /////////////////////////////

type ResolveClaimFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *ResolveClaimFunc) Id(v wasmclient.Hash) {
	f.args.Set(ArgId, f.args.FromHash(v))
}

func (f *ResolveClaimFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgId)
	return f.ClientFunc.Post(0x302e03fa, &f.args)
}

///////////////////////////// setOwner /////////////////////////////

type SetOwnerFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *SetOwnerFunc) Owner(v wasmclient.AgentID) {
	f.args.Set(ArgOwner, f.args.FromAgentID(v))
}

func (f *SetOwnerFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgOwner)
	return f.ClientFunc.Post(0x2a15fe7b, &f.args)
}

///////////////////////////// setPlantWater /////////////////////////////

type SetPlantWaterFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *SetPlantWaterFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *SetPlantWaterFunc) WaterLevel(v int32) {
	f.args.Set(ArgWaterLevel, f.args.FromInt32(v))
}

func (f *SetPlantWaterFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgPlantId)
	f.args.Mandatory(ArgWaterLevel)
	return f.ClientFunc.Post(0x6a4d53e6, &f.args)
}

///////////////////////////// setPlantWeatherTimeout /////////////////////////////

type SetPlantWeatherTimeoutFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *SetPlantWeatherTimeoutFunc) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *SetPlantWeatherTimeoutFunc) TimeoutDuration(v bool) {
	f.args.Set(ArgTimeoutDuration, f.args.FromBool(v))
}

func (f *SetPlantWeatherTimeoutFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgPlantId)
	f.args.Mandatory(ArgTimeoutDuration)
	return f.ClientFunc.Post(0x6f912118, &f.args)
}

///////////////////////////// getClaim /////////////////////////////

type GetClaimView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *GetClaimView) ReqClaimId(v wasmclient.Hash) {
	f.args.Set(ArgReqClaimId, f.args.FromHash(v))
}

func (f *GetClaimView) Call() GetClaimResults {
	f.args.Mandatory(ArgReqClaimId)
	f.ClientView.Call("getClaim", &f.args)
	return GetClaimResults{res: f.Results()}
}

type GetClaimResults struct {
	res wasmclient.Results
}

func (r *GetClaimResults) Claimer() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResClaimer))
}

func (r *GetClaimResults) Deposit() uint64 {
	return r.res.ToUint64(r.res.Get(ResDeposit))
}

func (r *GetClaimResults) Id() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResId))
}

func (r *GetClaimResults) PlantId() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResPlantId))
}

func (r *GetClaimResults) RecordedWaterLevel() int32 {
	return r.res.ToInt32(r.res.Get(ResRecordedWaterLevel))
}

func (r *GetClaimResults) Timestamp() uint64 {
	return r.res.ToUint64(r.res.Get(ResTimestamp))
}

///////////////////////////// getClaims /////////////////////////////

type GetClaimsView struct {
	wasmclient.ClientView
}

func (f *GetClaimsView) Call() GetClaimsResults {
	f.ClientView.Call("getClaims", nil)
	return GetClaimsResults{res: f.Results()}
}

type GetClaimsResults struct {
	res wasmclient.Results
}

func (r *GetClaimsResults) Claims() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResClaims))
}

///////////////////////////// getOwner /////////////////////////////

type GetOwnerView struct {
	wasmclient.ClientView
}

func (f *GetOwnerView) Call() GetOwnerResults {
	f.ClientView.Call("getOwner", nil)
	return GetOwnerResults{res: f.Results()}
}

type GetOwnerResults struct {
	res wasmclient.Results
}

func (r *GetOwnerResults) Owner() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResOwner))
}

///////////////////////////// getPlant /////////////////////////////

type GetPlantView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *GetPlantView) PlantId(v wasmclient.Hash) {
	f.args.Set(ArgPlantId, f.args.FromHash(v))
}

func (f *GetPlantView) Call() GetPlantResults {
	f.args.Mandatory(ArgPlantId)
	f.ClientView.Call("getPlant", &f.args)
	return GetPlantResults{res: f.Results()}
}

type GetPlantResults struct {
	res wasmclient.Results
}

func (r *GetPlantResults) Active() bool {
	return r.res.ToBool(r.res.Get(ResActive))
}

func (r *GetPlantResults) ActiveReason() uint32 {
	return r.res.ToUint32(r.res.Get(ResActiveReason))
}

func (r *GetPlantResults) ClaimId() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResClaimId))
}

func (r *GetPlantResults) Claimed() bool {
	return r.res.ToBool(r.res.Get(ResClaimed))
}

func (r *GetPlantResults) Covered() bool {
	return r.res.ToBool(r.res.Get(ResCovered))
}

func (r *GetPlantResults) CurrentWater() int32 {
	return r.res.ToInt32(r.res.Get(ResCurrentWater))
}

func (r *GetPlantResults) Description() string {
	return r.res.ToString(r.res.Get(ResDescription))
}

func (r *GetPlantResults) Funds() uint64 {
	return r.res.ToUint64(r.res.Get(ResFunds))
}

func (r *GetPlantResults) Id() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResId))
}

func (r *GetPlantResults) Lattitude() string {
	return r.res.ToString(r.res.Get(ResLattitude))
}

func (r *GetPlantResults) Longitude() string {
	return r.res.ToString(r.res.Get(ResLongitude))
}

func (r *GetPlantResults) Manufacturer() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResManufacturer))
}

func (r *GetPlantResults) Name() string {
	return r.res.ToString(r.res.Get(ResName))
}

func (r *GetPlantResults) Owner() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResOwner))
}

func (r *GetPlantResults) Reward() uint64 {
	return r.res.ToUint64(r.res.Get(ResReward))
}

func (r *GetPlantResults) WaterTarget() int32 {
	return r.res.ToInt32(r.res.Get(ResWaterTarget))
}

func (r *GetPlantResults) WaterThreshold() int32 {
	return r.res.ToInt32(r.res.Get(ResWaterThreshold))
}

///////////////////////////// getPlantOracles /////////////////////////////

type GetPlantOraclesView struct {
	wasmclient.ClientView
}

func (f *GetPlantOraclesView) Call() GetPlantOraclesResults {
	f.ClientView.Call("getPlantOracles", nil)
	return GetPlantOraclesResults{res: f.Results()}
}

type GetPlantOraclesResults struct {
	res wasmclient.Results
}

func (r *GetPlantOraclesResults) Oracles() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResOracles))
}

///////////////////////////// getPlants /////////////////////////////

type GetPlantsView struct {
	wasmclient.ClientView
}

func (f *GetPlantsView) Call() GetPlantsResults {
	f.ClientView.Call("getPlants", nil)
	return GetPlantsResults{res: f.Results()}
}

type GetPlantsResults struct {
	res wasmclient.Results
}

func (r *GetPlantsResults) Plants() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResPlants))
}

///////////////////////////// getPlantsFromOwner /////////////////////////////

type GetPlantsFromOwnerView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *GetPlantsFromOwnerView) OwnerId(v wasmclient.AgentID) {
	f.args.Set(ArgOwnerId, f.args.FromAgentID(v))
}

func (f *GetPlantsFromOwnerView) Call() GetPlantsFromOwnerResults {
	f.args.Mandatory(ArgOwnerId)
	f.ClientView.Call("getPlantsFromOwner", &f.args)
	return GetPlantsFromOwnerResults{res: f.Results()}
}

type GetPlantsFromOwnerResults struct {
	res wasmclient.Results
}

func (r *GetPlantsFromOwnerResults) Plants() wasmclient.Hash {
	return r.res.ToHash(r.res.Get(ResPlants))
}

///////////////////////////// getWeatherOracles /////////////////////////////

type GetWeatherOraclesView struct {
	wasmclient.ClientView
}

func (f *GetWeatherOraclesView) Call() GetWeatherOraclesResults {
	f.ClientView.Call("getWeatherOracles", nil)
	return GetWeatherOraclesResults{res: f.Results()}
}

type GetWeatherOraclesResults struct {
	res wasmclient.Results
}

func (r *GetWeatherOraclesResults) Oracles() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResOracles))
}

///////////////////////////// isPlantOwner /////////////////////////////

type IsPlantOwnerView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *IsPlantOwnerView) ReqOwnerId(v wasmclient.AgentID) {
	f.args.Set(ArgReqOwnerId, f.args.FromAgentID(v))
}

func (f *IsPlantOwnerView) ReqPlantId(v wasmclient.AgentID) {
	f.args.Set(ArgReqPlantId, f.args.FromAgentID(v))
}

func (f *IsPlantOwnerView) Call() IsPlantOwnerResults {
	f.args.Mandatory(ArgReqOwnerId)
	f.args.Mandatory(ArgReqPlantId)
	f.ClientView.Call("isPlantOwner", &f.args)
	return IsPlantOwnerResults{res: f.Results()}
}

type IsPlantOwnerResults struct {
	res wasmclient.Results
}

func (r *IsPlantOwnerResults) IsOwner() bool {
	return r.res.ToBool(r.res.Get(ResIsOwner))
}

///////////////////////////// PlantobellyService /////////////////////////////

type PlantobellyService struct {
	wasmclient.Service
}

func NewPlantobellyService(cl *wasmclient.ServiceClient, chainID string) (*PlantobellyService, error) {
	s := &PlantobellyService{}
	err := s.Service.Init(cl, chainID, 0x1eaa52f2)
	return s, err
}

func (s *PlantobellyService) NewEventHandler() *PlantobellyEvents {
	return &PlantobellyEvents{}
}

func (s *PlantobellyService) ActivatePlantOwner() ActivatePlantOwnerFunc {
	return ActivatePlantOwnerFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) AddPlantFunds() AddPlantFundsFunc {
	return AddPlantFundsFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) AddPlantOracle() AddPlantOracleFunc {
	return AddPlantOracleFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) AddWeatherOracle() AddWeatherOracleFunc {
	return AddWeatherOracleFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) ClaimWatering() ClaimWateringFunc {
	return ClaimWateringFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) EditOwnPlant() EditOwnPlantFunc {
	return EditOwnPlantFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) Init() InitFunc {
	return InitFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) InterruptWeatherEvent() InterruptWeatherEventFunc {
	return InterruptWeatherEventFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) MintPlantRaw() MintPlantRawFunc {
	return MintPlantRawFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) PayClaimer() PayClaimerFunc {
	return PayClaimerFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) ResolveClaim() ResolveClaimFunc {
	return ResolveClaimFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) SetOwner() SetOwnerFunc {
	return SetOwnerFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) SetPlantWater() SetPlantWaterFunc {
	return SetPlantWaterFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) SetPlantWeatherTimeout() SetPlantWeatherTimeoutFunc {
	return SetPlantWeatherTimeoutFunc{ClientFunc: s.AsClientFunc()}
}

func (s *PlantobellyService) GetClaim() GetClaimView {
	return GetClaimView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetClaims() GetClaimsView {
	return GetClaimsView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetOwner() GetOwnerView {
	return GetOwnerView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetPlant() GetPlantView {
	return GetPlantView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetPlantOracles() GetPlantOraclesView {
	return GetPlantOraclesView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetPlants() GetPlantsView {
	return GetPlantsView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetPlantsFromOwner() GetPlantsFromOwnerView {
	return GetPlantsFromOwnerView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) GetWeatherOracles() GetWeatherOraclesView {
	return GetWeatherOraclesView{ClientView: s.AsClientView()}
}

func (s *PlantobellyService) IsPlantOwner() IsPlantOwnerView {
	return IsPlantOwnerView{ClientView: s.AsClientView()}
}

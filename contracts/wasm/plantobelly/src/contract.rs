// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

pub struct ActivatePlantOwnerCall {
	pub func: ScFunc,
	pub params: MutableActivatePlantOwnerParams,
}

pub struct AddPlantFundsCall {
	pub func: ScFunc,
	pub params: MutableAddPlantFundsParams,
}

pub struct AddPlantOracleCall {
	pub func: ScFunc,
	pub params: MutableAddPlantOracleParams,
}

pub struct AddWeatherOracleCall {
	pub func: ScFunc,
	pub params: MutableAddWeatherOracleParams,
}

pub struct ClaimWateringCall {
	pub func: ScFunc,
	pub params: MutableClaimWateringParams,
}

pub struct EditOwnPlantCall {
	pub func: ScFunc,
	pub params: MutableEditOwnPlantParams,
}

pub struct InitCall {
	pub func: ScInitFunc,
	pub params: MutableInitParams,
}

pub struct InterruptWeatherEventCall {
	pub func: ScFunc,
	pub params: MutableInterruptWeatherEventParams,
}

pub struct MintPlantRawCall {
	pub func: ScFunc,
	pub params: MutableMintPlantRawParams,
}

pub struct PayClaimerCall {
	pub func: ScFunc,
	pub params: MutablePayClaimerParams,
}

pub struct ResolveClaimCall {
	pub func: ScFunc,
	pub params: MutableResolveClaimParams,
}

pub struct SetOwnerCall {
	pub func: ScFunc,
	pub params: MutableSetOwnerParams,
}

pub struct SetPlantWaterCall {
	pub func: ScFunc,
	pub params: MutableSetPlantWaterParams,
}

pub struct SetPlantWeatherTimeoutCall {
	pub func: ScFunc,
	pub params: MutableSetPlantWeatherTimeoutParams,
}

pub struct GetClaimCall {
	pub func: ScView,
	pub params: MutableGetClaimParams,
	pub results: ImmutableGetClaimResults,
}

pub struct GetClaimsCall {
	pub func: ScView,
	pub results: ImmutableGetClaimsResults,
}

pub struct GetOwnerCall {
	pub func: ScView,
	pub results: ImmutableGetOwnerResults,
}

pub struct GetPlantCall {
	pub func: ScView,
	pub params: MutableGetPlantParams,
	pub results: ImmutableGetPlantResults,
}

pub struct GetPlantOraclesCall {
	pub func: ScView,
	pub results: ImmutableGetPlantOraclesResults,
}

pub struct GetPlantsCall {
	pub func: ScView,
	pub results: ImmutableGetPlantsResults,
}

pub struct GetPlantsFromOwnerCall {
	pub func: ScView,
	pub params: MutableGetPlantsFromOwnerParams,
	pub results: ImmutableGetPlantsFromOwnerResults,
}

pub struct GetWeatherOraclesCall {
	pub func: ScView,
	pub results: ImmutableGetWeatherOraclesResults,
}

pub struct IsPlantOwnerCall {
	pub func: ScView,
	pub params: MutableIsPlantOwnerParams,
	pub results: ImmutableIsPlantOwnerResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn activate_plant_owner(_ctx: &dyn ScFuncCallContext) -> ActivatePlantOwnerCall {
        let mut f = ActivatePlantOwnerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ACTIVATE_PLANT_OWNER),
            params: MutableActivatePlantOwnerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn add_plant_funds(_ctx: &dyn ScFuncCallContext) -> AddPlantFundsCall {
        let mut f = AddPlantFundsCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_PLANT_FUNDS),
            params: MutableAddPlantFundsParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn add_plant_oracle(_ctx: &dyn ScFuncCallContext) -> AddPlantOracleCall {
        let mut f = AddPlantOracleCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_PLANT_ORACLE),
            params: MutableAddPlantOracleParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn add_weather_oracle(_ctx: &dyn ScFuncCallContext) -> AddWeatherOracleCall {
        let mut f = AddWeatherOracleCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_WEATHER_ORACLE),
            params: MutableAddWeatherOracleParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn claim_watering(_ctx: &dyn ScFuncCallContext) -> ClaimWateringCall {
        let mut f = ClaimWateringCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CLAIM_WATERING),
            params: MutableClaimWateringParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn edit_own_plant(_ctx: &dyn ScFuncCallContext) -> EditOwnPlantCall {
        let mut f = EditOwnPlantCall {
            func: ScFunc::new(HSC_NAME, HFUNC_EDIT_OWN_PLANT),
            params: MutableEditOwnPlantParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn init(_ctx: &dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func: ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { proxy: Proxy::nil() },
        };
        ScInitFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn interrupt_weather_event(_ctx: &dyn ScFuncCallContext) -> InterruptWeatherEventCall {
        let mut f = InterruptWeatherEventCall {
            func: ScFunc::new(HSC_NAME, HFUNC_INTERRUPT_WEATHER_EVENT),
            params: MutableInterruptWeatherEventParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn mint_plant_raw(_ctx: &dyn ScFuncCallContext) -> MintPlantRawCall {
        let mut f = MintPlantRawCall {
            func: ScFunc::new(HSC_NAME, HFUNC_MINT_PLANT_RAW),
            params: MutableMintPlantRawParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn pay_claimer(_ctx: &dyn ScFuncCallContext) -> PayClaimerCall {
        let mut f = PayClaimerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_PAY_CLAIMER),
            params: MutablePayClaimerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn resolve_claim(_ctx: &dyn ScFuncCallContext) -> ResolveClaimCall {
        let mut f = ResolveClaimCall {
            func: ScFunc::new(HSC_NAME, HFUNC_RESOLVE_CLAIM),
            params: MutableResolveClaimParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_owner(_ctx: &dyn ScFuncCallContext) -> SetOwnerCall {
        let mut f = SetOwnerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_OWNER),
            params: MutableSetOwnerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_plant_water(_ctx: &dyn ScFuncCallContext) -> SetPlantWaterCall {
        let mut f = SetPlantWaterCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_PLANT_WATER),
            params: MutableSetPlantWaterParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_plant_weather_timeout(_ctx: &dyn ScFuncCallContext) -> SetPlantWeatherTimeoutCall {
        let mut f = SetPlantWeatherTimeoutCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_PLANT_WEATHER_TIMEOUT),
            params: MutableSetPlantWeatherTimeoutParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn get_claim(_ctx: &dyn ScViewCallContext) -> GetClaimCall {
        let mut f = GetClaimCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_CLAIM),
            params: MutableGetClaimParams { proxy: Proxy::nil() },
            results: ImmutableGetClaimResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_claims(_ctx: &dyn ScViewCallContext) -> GetClaimsCall {
        let mut f = GetClaimsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_CLAIMS),
            results: ImmutableGetClaimsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_owner(_ctx: &dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_plant(_ctx: &dyn ScViewCallContext) -> GetPlantCall {
        let mut f = GetPlantCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PLANT),
            params: MutableGetPlantParams { proxy: Proxy::nil() },
            results: ImmutableGetPlantResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_plant_oracles(_ctx: &dyn ScViewCallContext) -> GetPlantOraclesCall {
        let mut f = GetPlantOraclesCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PLANT_ORACLES),
            results: ImmutableGetPlantOraclesResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_plants(_ctx: &dyn ScViewCallContext) -> GetPlantsCall {
        let mut f = GetPlantsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PLANTS),
            results: ImmutableGetPlantsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_plants_from_owner(_ctx: &dyn ScViewCallContext) -> GetPlantsFromOwnerCall {
        let mut f = GetPlantsFromOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PLANTS_FROM_OWNER),
            params: MutableGetPlantsFromOwnerParams { proxy: Proxy::nil() },
            results: ImmutableGetPlantsFromOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_weather_oracles(_ctx: &dyn ScViewCallContext) -> GetWeatherOraclesCall {
        let mut f = GetWeatherOraclesCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_WEATHER_ORACLES),
            results: ImmutableGetWeatherOraclesResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn is_plant_owner(_ctx: &dyn ScViewCallContext) -> IsPlantOwnerCall {
        let mut f = IsPlantOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_IS_PLANT_OWNER),
            params: MutableIsPlantOwnerParams { proxy: Proxy::nil() },
            results: ImmutableIsPlantOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableActivatePlantOwnerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableActivatePlantOwnerParams {
    pub fn new_state(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_NEW_STATE))
	}

    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct MutableActivatePlantOwnerParams {
	pub(crate) proxy: Proxy,
}

impl MutableActivatePlantOwnerParams {
    pub fn new_state(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_NEW_STATE))
	}

    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableAddPlantFundsParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddPlantFundsParams {
    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn value(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableAddPlantFundsParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddPlantFundsParams {
    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn value(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableAddPlantOracleParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddPlantOracleParams {
    pub fn oracle_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ORACLE_ID))
	}
}

#[derive(Clone)]
pub struct MutableAddPlantOracleParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddPlantOracleParams {
    pub fn oracle_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ORACLE_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableAddWeatherOracleParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddWeatherOracleParams {
    pub fn oracle_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ORACLE_ID))
	}
}

#[derive(Clone)]
pub struct MutableAddWeatherOracleParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddWeatherOracleParams {
    pub fn oracle_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ORACLE_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableClaimWateringParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableClaimWateringParams {
    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn timestamp(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_TIMESTAMP))
	}
}

#[derive(Clone)]
pub struct MutableClaimWateringParams {
	pub(crate) proxy: Proxy,
}

impl MutableClaimWateringParams {
    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn timestamp(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_TIMESTAMP))
	}
}

#[derive(Clone)]
pub struct ImmutableEditOwnPlantParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableEditOwnPlantParams {
    pub fn covered(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_COVERED))
	}

    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn lattitude(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_LATTITUDE))
	}

    pub fn longitude(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_LONGITUDE))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn reward(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_REWARD))
	}

    pub fn water_target(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_WATER_TARGET))
	}
}

#[derive(Clone)]
pub struct MutableEditOwnPlantParams {
	pub(crate) proxy: Proxy,
}

impl MutableEditOwnPlantParams {
    pub fn covered(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_COVERED))
	}

    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn lattitude(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_LATTITUDE))
	}

    pub fn longitude(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_LONGITUDE))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn reward(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_REWARD))
	}

    pub fn water_target(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_WATER_TARGET))
	}
}

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableInterruptWeatherEventParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInterruptWeatherEventParams {
    pub fn duration(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_DURATION))
	}

    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct MutableInterruptWeatherEventParams {
	pub(crate) proxy: Proxy,
}

impl MutableInterruptWeatherEventParams {
    pub fn duration(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_DURATION))
	}

    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableMintPlantRawParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableMintPlantRawParams {
    pub fn active(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_ACTIVE))
	}

    pub fn active_reason(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_ACTIVE_REASON))
	}

    pub fn claimed(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_CLAIMED))
	}

    pub fn covered(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_COVERED))
	}

    pub fn current_water(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_CURRENT_WATER))
	}

    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn funds(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_FUNDS))
	}

    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_ID))
	}

    pub fn lattitude(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_LATTITUDE))
	}

    pub fn longitude(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_LONGITUDE))
	}

    pub fn manufacturer(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_MANUFACTURER))
	}

    pub fn mint_claim_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_MINT_CLAIM_ID))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}

    pub fn pay_reward(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_PAY_REWARD))
	}

    pub fn water_target(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_WATER_TARGET))
	}

    pub fn water_threshold(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_WATER_THRESHOLD))
	}
}

#[derive(Clone)]
pub struct MutableMintPlantRawParams {
	pub(crate) proxy: Proxy,
}

impl MutableMintPlantRawParams {
    pub fn active(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_ACTIVE))
	}

    pub fn active_reason(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_ACTIVE_REASON))
	}

    pub fn claimed(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_CLAIMED))
	}

    pub fn covered(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_COVERED))
	}

    pub fn current_water(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_CURRENT_WATER))
	}

    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn funds(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_FUNDS))
	}

    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_ID))
	}

    pub fn lattitude(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_LATTITUDE))
	}

    pub fn longitude(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_LONGITUDE))
	}

    pub fn manufacturer(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_MANUFACTURER))
	}

    pub fn mint_claim_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_MINT_CLAIM_ID))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}

    pub fn pay_reward(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_PAY_REWARD))
	}

    pub fn water_target(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_WATER_TARGET))
	}

    pub fn water_threshold(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_WATER_THRESHOLD))
	}
}

#[derive(Clone)]
pub struct ImmutablePayClaimerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutablePayClaimerParams {
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    pub fn to(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_TO))
	}
}

#[derive(Clone)]
pub struct MutablePayClaimerParams {
	pub(crate) proxy: Proxy,
}

impl MutablePayClaimerParams {
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    pub fn to(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_TO))
	}
}

#[derive(Clone)]
pub struct ImmutableResolveClaimParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableResolveClaimParams {
    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_ID))
	}
}

#[derive(Clone)]
pub struct MutableResolveClaimParams {
	pub(crate) proxy: Proxy,
}

impl MutableResolveClaimParams {
    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableSetOwnerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableSetOwnerParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetOwnerParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableSetPlantWaterParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetPlantWaterParams {
    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn water_level(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_WATER_LEVEL))
	}
}

#[derive(Clone)]
pub struct MutableSetPlantWaterParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetPlantWaterParams {
    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn water_level(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_WATER_LEVEL))
	}
}

#[derive(Clone)]
pub struct ImmutableSetPlantWeatherTimeoutParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetPlantWeatherTimeoutParams {
    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn timeout_duration(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_TIMEOUT_DURATION))
	}
}

#[derive(Clone)]
pub struct MutableSetPlantWeatherTimeoutParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetPlantWeatherTimeoutParams {
    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}

    pub fn timeout_duration(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_TIMEOUT_DURATION))
	}
}

#[derive(Clone)]
pub struct ImmutableGetClaimParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetClaimParams {
    pub fn req_claim_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_REQ_CLAIM_ID))
	}
}

#[derive(Clone)]
pub struct MutableGetClaimParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetClaimParams {
    pub fn req_claim_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_REQ_CLAIM_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlantParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantParams {
    pub fn plant_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct MutableGetPlantParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantParams {
    pub fn plant_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlantsFromOwnerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantsFromOwnerParams {
    pub fn owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct MutableGetPlantsFromOwnerParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantsFromOwnerParams {
    pub fn owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableIsPlantOwnerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableIsPlantOwnerParams {
    pub fn req_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_REQ_OWNER_ID))
	}

    pub fn req_plant_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_REQ_PLANT_ID))
	}
}

#[derive(Clone)]
pub struct MutableIsPlantOwnerParams {
	pub(crate) proxy: Proxy,
}

impl MutableIsPlantOwnerParams {
    pub fn req_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_REQ_OWNER_ID))
	}

    pub fn req_plant_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_REQ_PLANT_ID))
	}
}

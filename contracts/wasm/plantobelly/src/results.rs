// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableGetClaimResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetClaimResults {
    pub fn claim(&self) -> ImmutableClaim {
		ImmutableClaim { proxy: self.proxy.root(RESULT_CLAIM) }
	}
}

#[derive(Clone)]
pub struct MutableGetClaimResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetClaimResults {
    pub fn claim(&self) -> MutableClaim {
		MutableClaim { proxy: self.proxy.root(RESULT_CLAIM) }
	}
}

#[derive(Clone)]
pub struct ArrayOfImmutableClaim {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableClaim {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_claim(&self, index: u32) -> ImmutableClaim {
		ImmutableClaim { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetClaimsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetClaimsResults {
    pub fn claims(&self) -> ArrayOfImmutableClaim {
		ArrayOfImmutableClaim { proxy: self.proxy.root(RESULT_CLAIMS) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableClaim {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableClaim {

	pub fn append_claim(&self) -> MutableClaim {
		MutableClaim { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_claim(&self, index: u32) -> MutableClaim {
		MutableClaim { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MutableGetClaimsResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetClaimsResults {
    pub fn claims(&self) -> ArrayOfMutableClaim {
		ArrayOfMutableClaim { proxy: self.proxy.root(RESULT_CLAIMS) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetOwnerResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetOwnerResults {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableGetOwnerResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetOwnerResults {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlantResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantResults {
    pub fn plant(&self) -> ImmutablePlant {
		ImmutablePlant { proxy: self.proxy.root(RESULT_PLANT) }
	}
}

#[derive(Clone)]
pub struct MutableGetPlantResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantResults {
    pub fn plant(&self) -> MutablePlant {
		MutablePlant { proxy: self.proxy.root(RESULT_PLANT) }
	}
}

#[derive(Clone)]
pub struct ArrayOfImmutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableAgentID {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutableGetPlantOraclesResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantOraclesResults {
    pub fn oracles(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(RESULT_ORACLES) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableAgentID {
	pub fn append_agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutableGetPlantOraclesResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantOraclesResults {
    pub fn oracles(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(RESULT_ORACLES) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlantsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantsResults {
    pub fn plants(&self) -> ArrayOfImmutablePlant {
		ArrayOfImmutablePlant { proxy: self.proxy.root(RESULT_PLANTS) }
	}
}

#[derive(Clone)]
pub struct MutableGetPlantsResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantsResults {
    pub fn plants(&self) -> ArrayOfMutablePlant {
		ArrayOfMutablePlant { proxy: self.proxy.root(RESULT_PLANTS) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlantsFromOwnerResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlantsFromOwnerResults {
    pub fn plants(&self) -> ArrayOfImmutablePlant {
		ArrayOfImmutablePlant { proxy: self.proxy.root(RESULT_PLANTS) }
	}
}

#[derive(Clone)]
pub struct MutableGetPlantsFromOwnerResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlantsFromOwnerResults {
    pub fn plants(&self) -> ArrayOfMutablePlant {
		ArrayOfMutablePlant { proxy: self.proxy.root(RESULT_PLANTS) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetWeatherOraclesResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetWeatherOraclesResults {
    pub fn oracles(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(RESULT_ORACLES) }
	}
}

#[derive(Clone)]
pub struct MutableGetWeatherOraclesResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetWeatherOraclesResults {
    pub fn oracles(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(RESULT_ORACLES) }
	}
}

#[derive(Clone)]
pub struct ImmutableIsPlantOwnerResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableIsPlantOwnerResults {
    pub fn is_owner(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(RESULT_IS_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableIsPlantOwnerResults {
	pub(crate) proxy: Proxy,
}

impl MutableIsPlantOwnerResults {
    pub fn is_owner(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(RESULT_IS_OWNER))
	}
}

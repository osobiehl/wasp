// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct MapHashToImmutableClaim {
	pub(crate) proxy: Proxy,
}

impl MapHashToImmutableClaim {
    pub fn get_claim(&self, key: &ScHash) -> ImmutableClaim {
        ImmutableClaim { proxy: self.proxy.key(&hash_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableIds {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableIds {
    pub fn get_ids(&self, key: &ScAgentID) -> ImmutableIds {
        ImmutableIds { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapHashToImmutablePlant {
	pub(crate) proxy: Proxy,
}

impl MapHashToImmutablePlant {
    pub fn get_plant(&self, key: &ScHash) -> ImmutablePlant {
        ImmutablePlant { proxy: self.proxy.key(&hash_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ImmutableplantobellyState {
	pub(crate) proxy: Proxy,
}

impl ImmutableplantobellyState {
    pub fn allowed_plant_oracles(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(STATE_ALLOWED_PLANT_ORACLES) }
	}

    pub fn allowed_weather_oracles(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(STATE_ALLOWED_WEATHER_ORACLES) }
	}

    pub fn claim_ids(&self) -> ArrayOfImmutableHash {
		ArrayOfImmutableHash { proxy: self.proxy.root(STATE_CLAIM_IDS) }
	}

    pub fn claims(&self) -> MapHashToImmutableClaim {
		MapHashToImmutableClaim { proxy: self.proxy.root(STATE_CLAIMS) }
	}

    pub fn owned_plants(&self) -> MapAgentIDToImmutableIds {
		MapAgentIDToImmutableIds { proxy: self.proxy.root(STATE_OWNED_PLANTS) }
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn plant_ids(&self) -> ArrayOfImmutableHash {
		ArrayOfImmutableHash { proxy: self.proxy.root(STATE_PLANT_IDS) }
	}

    pub fn plant_owners(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(STATE_PLANT_OWNERS) }
	}

    pub fn plants(&self) -> MapHashToImmutablePlant {
		MapHashToImmutablePlant { proxy: self.proxy.root(STATE_PLANTS) }
	}
}

#[derive(Clone)]
pub struct MapHashToMutableClaim {
	pub(crate) proxy: Proxy,
}

impl MapHashToMutableClaim {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_claim(&self, key: &ScHash) -> MutableClaim {
        MutableClaim { proxy: self.proxy.key(&hash_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableIds {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableIds {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_ids(&self, key: &ScAgentID) -> MutableIds {
        MutableIds { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapHashToMutablePlant {
	pub(crate) proxy: Proxy,
}

impl MapHashToMutablePlant {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_plant(&self, key: &ScHash) -> MutablePlant {
        MutablePlant { proxy: self.proxy.key(&hash_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MutableplantobellyState {
	pub(crate) proxy: Proxy,
}

impl MutableplantobellyState {
    pub fn as_immutable(&self) -> ImmutableplantobellyState {
		ImmutableplantobellyState { proxy: self.proxy.root("") }
	}

    pub fn allowed_plant_oracles(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(STATE_ALLOWED_PLANT_ORACLES) }
	}

    pub fn allowed_weather_oracles(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(STATE_ALLOWED_WEATHER_ORACLES) }
	}

    pub fn claim_ids(&self) -> ArrayOfMutableHash {
		ArrayOfMutableHash { proxy: self.proxy.root(STATE_CLAIM_IDS) }
	}

    pub fn claims(&self) -> MapHashToMutableClaim {
		MapHashToMutableClaim { proxy: self.proxy.root(STATE_CLAIMS) }
	}

    pub fn owned_plants(&self) -> MapAgentIDToMutableIds {
		MapAgentIDToMutableIds { proxy: self.proxy.root(STATE_OWNED_PLANTS) }
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn plant_ids(&self) -> ArrayOfMutableHash {
		ArrayOfMutableHash { proxy: self.proxy.root(STATE_PLANT_IDS) }
	}

    pub fn plant_owners(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(STATE_PLANT_OWNERS) }
	}

    pub fn plants(&self) -> MapHashToMutablePlant {
		MapHashToMutablePlant { proxy: self.proxy.root(STATE_PLANTS) }
	}
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableHash {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableHash {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_hash(&self, index: u32) -> ScImmutableHash {
        ScImmutableHash::new(self.proxy.index(index))
    }
}

pub type ImmutableIds = ArrayOfImmutableHash;

#[derive(Clone)]
pub struct ArrayOfMutableHash {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableHash {
	pub fn append_hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_hash(&self, index: u32) -> ScMutableHash {
        ScMutableHash::new(self.proxy.index(index))
    }
}

pub type MutableIds = ArrayOfMutableHash;

#[derive(Clone)]
pub struct ArrayOfImmutablePlant {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutablePlant {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_plant(&self, index: u32) -> ImmutablePlant {
		ImmutablePlant { proxy: self.proxy.index(index) }
	}
}

pub type ImmutablePlants = ArrayOfImmutablePlant;

#[derive(Clone)]
pub struct ArrayOfMutablePlant {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutablePlant {

	pub fn append_plant(&self) -> MutablePlant {
		MutablePlant { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_plant(&self, index: u32) -> MutablePlant {
		MutablePlant { proxy: self.proxy.index(index) }
	}
}

pub type MutablePlants = ArrayOfMutablePlant;

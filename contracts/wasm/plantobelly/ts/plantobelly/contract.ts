// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ActivatePlantOwnerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncActivatePlantOwner);
	params: sc.MutableActivatePlantOwnerParams = new sc.MutableActivatePlantOwnerParams(wasmlib.ScView.nilProxy);
}

export class ActivatePlantOwnerContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableActivatePlantOwnerParams = new sc.ImmutableActivatePlantOwnerParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class AddPlantFundsCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddPlantFunds);
	params: sc.MutableAddPlantFundsParams = new sc.MutableAddPlantFundsParams(wasmlib.ScView.nilProxy);
}

export class AddPlantFundsContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableAddPlantFundsParams = new sc.ImmutableAddPlantFundsParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class AddPlantOracleCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddPlantOracle);
	params: sc.MutableAddPlantOracleParams = new sc.MutableAddPlantOracleParams(wasmlib.ScView.nilProxy);
}

export class AddPlantOracleContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableAddPlantOracleParams = new sc.ImmutableAddPlantOracleParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class AddWeatherOracleCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddWeatherOracle);
	params: sc.MutableAddWeatherOracleParams = new sc.MutableAddWeatherOracleParams(wasmlib.ScView.nilProxy);
}

export class AddWeatherOracleContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableAddWeatherOracleParams = new sc.ImmutableAddWeatherOracleParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class ClaimWateringCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncClaimWatering);
	params: sc.MutableClaimWateringParams = new sc.MutableClaimWateringParams(wasmlib.ScView.nilProxy);
}

export class ClaimWateringContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableClaimWateringParams = new sc.ImmutableClaimWateringParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class EditOwnPlantCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncEditOwnPlant);
	params: sc.MutableEditOwnPlantParams = new sc.MutableEditOwnPlantParams(wasmlib.ScView.nilProxy);
}

export class EditOwnPlantContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableEditOwnPlantParams = new sc.ImmutableEditOwnPlantParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class InitCall {
	func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
	params: sc.MutableInitParams = new sc.MutableInitParams(wasmlib.ScView.nilProxy);
}

export class InitContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableInitParams = new sc.ImmutableInitParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class InterruptWeatherEventCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncInterruptWeatherEvent);
	params: sc.MutableInterruptWeatherEventParams = new sc.MutableInterruptWeatherEventParams(wasmlib.ScView.nilProxy);
}

export class InterruptWeatherEventContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableInterruptWeatherEventParams = new sc.ImmutableInterruptWeatherEventParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class MintPlantCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncMintPlant);
	params: sc.MutableMintPlantParams = new sc.MutableMintPlantParams(wasmlib.ScView.nilProxy);
}

export class MintPlantContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableMintPlantParams = new sc.ImmutableMintPlantParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class MintPlantRawCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncMintPlantRaw);
	params: sc.MutableMintPlantRawParams = new sc.MutableMintPlantRawParams(wasmlib.ScView.nilProxy);
}

export class MintPlantRawContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableMintPlantRawParams = new sc.ImmutableMintPlantRawParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class PayClaimerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncPayClaimer);
	params: sc.MutablePayClaimerParams = new sc.MutablePayClaimerParams(wasmlib.ScView.nilProxy);
}

export class PayClaimerContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutablePayClaimerParams = new sc.ImmutablePayClaimerParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class ResolveClaimCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncResolveClaim);
	params: sc.MutableResolveClaimParams = new sc.MutableResolveClaimParams(wasmlib.ScView.nilProxy);
}

export class ResolveClaimContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableResolveClaimParams = new sc.ImmutableResolveClaimParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class SetOwnerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetOwner);
	params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams(wasmlib.ScView.nilProxy);
}

export class SetOwnerContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class SetPlantWaterCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetPlantWater);
	params: sc.MutableSetPlantWaterParams = new sc.MutableSetPlantWaterParams(wasmlib.ScView.nilProxy);
}

export class SetPlantWaterContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableSetPlantWaterParams = new sc.ImmutableSetPlantWaterParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class SetPlantWeatherTimeoutCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetPlantWeatherTimeout);
	params: sc.MutableSetPlantWeatherTimeoutParams = new sc.MutableSetPlantWeatherTimeoutParams(wasmlib.ScView.nilProxy);
}

export class SetPlantWeatherTimeoutContext {
	events: sc.plantobellyEvents = new sc.plantobellyEvents();
	params: sc.ImmutableSetPlantWeatherTimeoutParams = new sc.ImmutableSetPlantWeatherTimeoutParams(wasmlib.paramsProxy());
	state: sc.MutableplantobellyState = new sc.MutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetClaimCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetClaim);
	params: sc.MutableGetClaimParams = new sc.MutableGetClaimParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetClaimResults = new sc.ImmutableGetClaimResults(wasmlib.ScView.nilProxy);
}

export class GetClaimContext {
	params: sc.ImmutableGetClaimParams = new sc.ImmutableGetClaimParams(wasmlib.paramsProxy());
	results: sc.MutableGetClaimResults = new sc.MutableGetClaimResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetClaimsCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetClaims);
	results: sc.ImmutableGetClaimsResults = new sc.ImmutableGetClaimsResults(wasmlib.ScView.nilProxy);
}

export class GetClaimsContext {
	results: sc.MutableGetClaimsResults = new sc.MutableGetClaimsResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetOwnerCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetOwner);
	results: sc.ImmutableGetOwnerResults = new sc.ImmutableGetOwnerResults(wasmlib.ScView.nilProxy);
}

export class GetOwnerContext {
	results: sc.MutableGetOwnerResults = new sc.MutableGetOwnerResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetPlantCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetPlant);
	params: sc.MutableGetPlantParams = new sc.MutableGetPlantParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetPlantResults = new sc.ImmutableGetPlantResults(wasmlib.ScView.nilProxy);
}

export class GetPlantContext {
	params: sc.ImmutableGetPlantParams = new sc.ImmutableGetPlantParams(wasmlib.paramsProxy());
	results: sc.MutableGetPlantResults = new sc.MutableGetPlantResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetPlantOraclesCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetPlantOracles);
	results: sc.ImmutableGetPlantOraclesResults = new sc.ImmutableGetPlantOraclesResults(wasmlib.ScView.nilProxy);
}

export class GetPlantOraclesContext {
	results: sc.MutableGetPlantOraclesResults = new sc.MutableGetPlantOraclesResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetPlantsCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetPlants);
	results: sc.ImmutableGetPlantsResults = new sc.ImmutableGetPlantsResults(wasmlib.ScView.nilProxy);
}

export class GetPlantsContext {
	results: sc.MutableGetPlantsResults = new sc.MutableGetPlantsResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetPlantsFromOwnerCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetPlantsFromOwner);
	params: sc.MutableGetPlantsFromOwnerParams = new sc.MutableGetPlantsFromOwnerParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetPlantsFromOwnerResults = new sc.ImmutableGetPlantsFromOwnerResults(wasmlib.ScView.nilProxy);
}

export class GetPlantsFromOwnerContext {
	params: sc.ImmutableGetPlantsFromOwnerParams = new sc.ImmutableGetPlantsFromOwnerParams(wasmlib.paramsProxy());
	results: sc.MutableGetPlantsFromOwnerResults = new sc.MutableGetPlantsFromOwnerResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class GetWeatherOraclesCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetWeatherOracles);
	results: sc.ImmutableGetWeatherOraclesResults = new sc.ImmutableGetWeatherOraclesResults(wasmlib.ScView.nilProxy);
}

export class GetWeatherOraclesContext {
	results: sc.MutableGetWeatherOraclesResults = new sc.MutableGetWeatherOraclesResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class IsPlantOwnerCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewIsPlantOwner);
	params: sc.MutableIsPlantOwnerParams = new sc.MutableIsPlantOwnerParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableIsPlantOwnerResults = new sc.ImmutableIsPlantOwnerResults(wasmlib.ScView.nilProxy);
}

export class IsPlantOwnerContext {
	params: sc.ImmutableIsPlantOwnerParams = new sc.ImmutableIsPlantOwnerParams(wasmlib.paramsProxy());
	results: sc.MutableIsPlantOwnerResults = new sc.MutableIsPlantOwnerResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableplantobellyState = new sc.ImmutableplantobellyState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static activatePlantOwner(_ctx: wasmlib.ScFuncCallContext): ActivatePlantOwnerCall {
		const f = new ActivatePlantOwnerCall();
		f.params = new sc.MutableActivatePlantOwnerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addPlantFunds(_ctx: wasmlib.ScFuncCallContext): AddPlantFundsCall {
		const f = new AddPlantFundsCall();
		f.params = new sc.MutableAddPlantFundsParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addPlantOracle(_ctx: wasmlib.ScFuncCallContext): AddPlantOracleCall {
		const f = new AddPlantOracleCall();
		f.params = new sc.MutableAddPlantOracleParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addWeatherOracle(_ctx: wasmlib.ScFuncCallContext): AddWeatherOracleCall {
		const f = new AddWeatherOracleCall();
		f.params = new sc.MutableAddWeatherOracleParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static claimWatering(_ctx: wasmlib.ScFuncCallContext): ClaimWateringCall {
		const f = new ClaimWateringCall();
		f.params = new sc.MutableClaimWateringParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static editOwnPlant(_ctx: wasmlib.ScFuncCallContext): EditOwnPlantCall {
		const f = new EditOwnPlantCall();
		f.params = new sc.MutableEditOwnPlantParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static init(_ctx: wasmlib.ScFuncCallContext): InitCall {
		const f = new InitCall();
		f.params = new sc.MutableInitParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static interruptWeatherEvent(_ctx: wasmlib.ScFuncCallContext): InterruptWeatherEventCall {
		const f = new InterruptWeatherEventCall();
		f.params = new sc.MutableInterruptWeatherEventParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static mintPlant(_ctx: wasmlib.ScFuncCallContext): MintPlantCall {
		const f = new MintPlantCall();
		f.params = new sc.MutableMintPlantParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static mintPlantRaw(_ctx: wasmlib.ScFuncCallContext): MintPlantRawCall {
		const f = new MintPlantRawCall();
		f.params = new sc.MutableMintPlantRawParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static payClaimer(_ctx: wasmlib.ScFuncCallContext): PayClaimerCall {
		const f = new PayClaimerCall();
		f.params = new sc.MutablePayClaimerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static resolveClaim(_ctx: wasmlib.ScFuncCallContext): ResolveClaimCall {
		const f = new ResolveClaimCall();
		f.params = new sc.MutableResolveClaimParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setOwner(_ctx: wasmlib.ScFuncCallContext): SetOwnerCall {
		const f = new SetOwnerCall();
		f.params = new sc.MutableSetOwnerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setPlantWater(_ctx: wasmlib.ScFuncCallContext): SetPlantWaterCall {
		const f = new SetPlantWaterCall();
		f.params = new sc.MutableSetPlantWaterParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setPlantWeatherTimeout(_ctx: wasmlib.ScFuncCallContext): SetPlantWeatherTimeoutCall {
		const f = new SetPlantWeatherTimeoutCall();
		f.params = new sc.MutableSetPlantWeatherTimeoutParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getClaim(_ctx: wasmlib.ScViewCallContext): GetClaimCall {
		const f = new GetClaimCall();
		f.params = new sc.MutableGetClaimParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetClaimResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getClaims(_ctx: wasmlib.ScViewCallContext): GetClaimsCall {
		const f = new GetClaimsCall();
		f.results = new sc.ImmutableGetClaimsResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getOwner(_ctx: wasmlib.ScViewCallContext): GetOwnerCall {
		const f = new GetOwnerCall();
		f.results = new sc.ImmutableGetOwnerResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getPlant(_ctx: wasmlib.ScViewCallContext): GetPlantCall {
		const f = new GetPlantCall();
		f.params = new sc.MutableGetPlantParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetPlantResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getPlantOracles(_ctx: wasmlib.ScViewCallContext): GetPlantOraclesCall {
		const f = new GetPlantOraclesCall();
		f.results = new sc.ImmutableGetPlantOraclesResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getPlants(_ctx: wasmlib.ScViewCallContext): GetPlantsCall {
		const f = new GetPlantsCall();
		f.results = new sc.ImmutableGetPlantsResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getPlantsFromOwner(_ctx: wasmlib.ScViewCallContext): GetPlantsFromOwnerCall {
		const f = new GetPlantsFromOwnerCall();
		f.params = new sc.MutableGetPlantsFromOwnerParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetPlantsFromOwnerResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getWeatherOracles(_ctx: wasmlib.ScViewCallContext): GetWeatherOraclesCall {
		const f = new GetWeatherOraclesCall();
		f.results = new sc.ImmutableGetWeatherOraclesResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static isPlantOwner(_ctx: wasmlib.ScViewCallContext): IsPlantOwnerCall {
		const f = new IsPlantOwnerCall();
		f.params = new sc.MutableIsPlantOwnerParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableIsPlantOwnerResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}

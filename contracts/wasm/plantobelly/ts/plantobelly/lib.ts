// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncActivatePlantOwner,
		sc.FuncAddPlantFunds,
		sc.FuncAddPlantOracle,
		sc.FuncAddWeatherOracle,
		sc.FuncClaimWatering,
		sc.FuncEditOwnPlant,
		sc.FuncInit,
		sc.FuncInterruptWeatherEvent,
		sc.FuncMintPlant,
		sc.FuncMintPlantRaw,
		sc.FuncPayClaimer,
		sc.FuncResolveClaim,
		sc.FuncSetOwner,
		sc.FuncSetPlantWater,
		sc.FuncSetPlantWeatherTimeout,
		sc.ViewGetClaim,
		sc.ViewGetClaims,
		sc.ViewGetOwner,
		sc.ViewGetPlant,
		sc.ViewGetPlantOracles,
		sc.ViewGetPlants,
		sc.ViewGetPlantsFromOwner,
		sc.ViewGetWeatherOracles,
		sc.ViewIsPlantOwner,
	],
	funcs: [
		funcActivatePlantOwnerThunk,
		funcAddPlantFundsThunk,
		funcAddPlantOracleThunk,
		funcAddWeatherOracleThunk,
		funcClaimWateringThunk,
		funcEditOwnPlantThunk,
		funcInitThunk,
		funcInterruptWeatherEventThunk,
		funcMintPlantThunk,
		funcMintPlantRawThunk,
		funcPayClaimerThunk,
		funcResolveClaimThunk,
		funcSetOwnerThunk,
		funcSetPlantWaterThunk,
		funcSetPlantWeatherTimeoutThunk,
	],
	views: [
		viewGetClaimThunk,
		viewGetClaimsThunk,
		viewGetOwnerThunk,
		viewGetPlantThunk,
		viewGetPlantOraclesThunk,
		viewGetPlantsThunk,
		viewGetPlantsFromOwnerThunk,
		viewGetWeatherOraclesThunk,
		viewIsPlantOwnerThunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.ScExports.export(exportMap);
}

function funcActivatePlantOwnerThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcActivatePlantOwner");
	let f = new sc.ActivatePlantOwnerContext();
	const access = f.state.plantOwners();
	ctx.require(access.exists(), "access not set: plantOwners");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.newState().exists(), "missing mandatory newState");
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	sc.funcActivatePlantOwner(ctx, f);
	ctx.log("plantobelly.funcActivatePlantOwner ok");
}

function funcAddPlantFundsThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcAddPlantFunds");
	let f = new sc.AddPlantFundsContext();
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	ctx.require(f.params.value().exists(), "missing mandatory value");
	sc.funcAddPlantFunds(ctx, f);
	ctx.log("plantobelly.funcAddPlantFunds ok");
}

function funcAddPlantOracleThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcAddPlantOracle");
	let f = new sc.AddPlantOracleContext();
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.oracleId().exists(), "missing mandatory oracleId");
	sc.funcAddPlantOracle(ctx, f);
	ctx.log("plantobelly.funcAddPlantOracle ok");
}

function funcAddWeatherOracleThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcAddWeatherOracle");
	let f = new sc.AddWeatherOracleContext();
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.oracleId().exists(), "missing mandatory oracleId");
	sc.funcAddWeatherOracle(ctx, f);
	ctx.log("plantobelly.funcAddWeatherOracle ok");
}

function funcClaimWateringThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcClaimWatering");
	let f = new sc.ClaimWateringContext();
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	ctx.require(f.params.timestamp().exists(), "missing mandatory timestamp");
	sc.funcClaimWatering(ctx, f);
	ctx.log("plantobelly.funcClaimWatering ok");
}

function funcEditOwnPlantThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcEditOwnPlant");
	let f = new sc.EditOwnPlantContext();
	const access = f.state.plantOwners();
	ctx.require(access.exists(), "access not set: plantOwners");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.covered().exists(), "missing mandatory covered");
	ctx.require(f.params.description().exists(), "missing mandatory description");
	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.reward().exists(), "missing mandatory reward");
	ctx.require(f.params.waterTarget().exists(), "missing mandatory waterTarget");
	sc.funcEditOwnPlant(ctx, f);
	ctx.log("plantobelly.funcEditOwnPlant ok");
}

function funcInitThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcInit");
	let f = new sc.InitContext();
	sc.funcInit(ctx, f);
	ctx.log("plantobelly.funcInit ok");
}

function funcInterruptWeatherEventThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcInterruptWeatherEvent");
	let f = new sc.InterruptWeatherEventContext();

	// weather server sending data OR weather smart contract (later)
	const access = f.state.allowedWeatherOracles();
	ctx.require(access.exists(), "access not set: allowedWeatherOracles");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.duration().exists(), "missing mandatory duration");
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	sc.funcInterruptWeatherEvent(ctx, f);
	ctx.log("plantobelly.funcInterruptWeatherEvent ok");
}

function funcMintPlantThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcMintPlant");
	let f = new sc.MintPlantContext();
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	sc.funcMintPlant(ctx, f);
	ctx.log("plantobelly.funcMintPlant ok");
}

function funcMintPlantRawThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcMintPlantRaw");
	let f = new sc.MintPlantRawContext();
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.active().exists(), "missing mandatory active");
	ctx.require(f.params.activeReason().exists(), "missing mandatory activeReason");
	ctx.require(f.params.claimId().exists(), "missing mandatory claimId");
	ctx.require(f.params.claimed().exists(), "missing mandatory claimed");
	ctx.require(f.params.covered().exists(), "missing mandatory covered");
	ctx.require(f.params.currentWater().exists(), "missing mandatory currentWater");
	ctx.require(f.params.description().exists(), "missing mandatory description");
	ctx.require(f.params.funds().exists(), "missing mandatory funds");
	ctx.require(f.params.id().exists(), "missing mandatory id");
	ctx.require(f.params.lattitude().exists(), "missing mandatory lattitude");
	ctx.require(f.params.longitude().exists(), "missing mandatory longitude");
	ctx.require(f.params.manufacturer().exists(), "missing mandatory manufacturer");
	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	ctx.require(f.params.payReward().exists(), "missing mandatory payReward");
	ctx.require(f.params.waterTarget().exists(), "missing mandatory waterTarget");
	ctx.require(f.params.waterThreshold().exists(), "missing mandatory waterThreshold");
	sc.funcMintPlantRaw(ctx, f);
	ctx.log("plantobelly.funcMintPlantRaw ok");
}

function funcPayClaimerThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcPayClaimer");
	let f = new sc.PayClaimerContext();
	ctx.require(ctx.caller().equals(ctx.accountID()), "no permission");

	ctx.require(f.params.amount().exists(), "missing mandatory amount");
	ctx.require(f.params.to().exists(), "missing mandatory to");
	sc.funcPayClaimer(ctx, f);
	ctx.log("plantobelly.funcPayClaimer ok");
}

function funcResolveClaimThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcResolveClaim");
	let f = new sc.ResolveClaimContext();

	// internal claim resolution function, resolving a resolved claim is defined behaviour
	ctx.require(ctx.caller().equals(ctx.accountID()), "no permission");

	ctx.require(f.params.id().exists(), "missing mandatory id");
	sc.funcResolveClaim(ctx, f);
	ctx.log("plantobelly.funcResolveClaim ok");
}

function funcSetOwnerThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcSetOwner");
	let f = new sc.SetOwnerContext();

	// current owner of this smart contract
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	sc.funcSetOwner(ctx, f);
	ctx.log("plantobelly.funcSetOwner ok");
}

function funcSetPlantWaterThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcSetPlantWater");
	let f = new sc.SetPlantWaterContext();
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	ctx.require(f.params.waterLevel().exists(), "missing mandatory waterLevel");
	sc.funcSetPlantWater(ctx, f);
	ctx.log("plantobelly.funcSetPlantWater ok");
}

function funcSetPlantWeatherTimeoutThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("plantobelly.funcSetPlantWeatherTimeout");
	let f = new sc.SetPlantWeatherTimeoutContext();
	const access = f.state.allowedWeatherOracles();
	ctx.require(access.exists(), "access not set: allowedWeatherOracles");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	ctx.require(f.params.timeoutDuration().exists(), "missing mandatory timeoutDuration");
	sc.funcSetPlantWeatherTimeout(ctx, f);
	ctx.log("plantobelly.funcSetPlantWeatherTimeout ok");
}

function viewGetClaimThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetClaim");
	let f = new sc.GetClaimContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetClaimResults(results.asProxy());
	sc.viewGetClaim(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetClaim ok");
}

function viewGetClaimsThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetClaims");
	let f = new sc.GetClaimsContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetClaimsResults(results.asProxy());
	sc.viewGetClaims(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetClaims ok");
}

function viewGetOwnerThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetOwner");
	let f = new sc.GetOwnerContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetOwnerResults(results.asProxy());
	sc.viewGetOwner(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetOwner ok");
}

function viewGetPlantThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetPlant");
	let f = new sc.GetPlantContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlantResults(results.asProxy());
	ctx.require(f.params.plantId().exists(), "missing mandatory plantId");
	sc.viewGetPlant(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetPlant ok");
}

function viewGetPlantOraclesThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetPlantOracles");
	let f = new sc.GetPlantOraclesContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlantOraclesResults(results.asProxy());
	sc.viewGetPlantOracles(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetPlantOracles ok");
}

function viewGetPlantsThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetPlants");
	let f = new sc.GetPlantsContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlantsResults(results.asProxy());
	sc.viewGetPlants(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetPlants ok");
}

function viewGetPlantsFromOwnerThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetPlantsFromOwner");
	let f = new sc.GetPlantsFromOwnerContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlantsFromOwnerResults(results.asProxy());
	ctx.require(f.params.ownerId().exists(), "missing mandatory ownerId");
	sc.viewGetPlantsFromOwner(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetPlantsFromOwner ok");
}

function viewGetWeatherOraclesThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewGetWeatherOracles");
	let f = new sc.GetWeatherOraclesContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetWeatherOraclesResults(results.asProxy());
	sc.viewGetWeatherOracles(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewGetWeatherOracles ok");
}

function viewIsPlantOwnerThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("plantobelly.viewIsPlantOwner");
	let f = new sc.IsPlantOwnerContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableIsPlantOwnerResults(results.asProxy());
	ctx.require(f.params.reqOwnerId().exists(), "missing mandatory reqOwnerId");
	ctx.require(f.params.reqPlantId().exists(), "missing mandatory reqPlantId");
	sc.viewIsPlantOwner(ctx, f);
	ctx.results(results);
	ctx.log("plantobelly.viewIsPlantOwner ok");
}

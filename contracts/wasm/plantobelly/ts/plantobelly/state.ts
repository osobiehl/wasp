// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";
import * as sc from "./index";

export class MapHashToImmutableClaim extends wasmtypes.ScProxy {

	getClaim(key: wasmtypes.ScHash): sc.ImmutableClaim {
		return new sc.ImmutableClaim(this.proxy.key(wasmtypes.hashToBytes(key)));
	}
}

export class MapAgentIDToImmutableIds extends wasmtypes.ScProxy {

	getIds(key: wasmtypes.ScAgentID): sc.ImmutableIds {
		return new sc.ImmutableIds(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapHashToImmutablePlant extends wasmtypes.ScProxy {

	getPlant(key: wasmtypes.ScHash): sc.ImmutablePlant {
		return new sc.ImmutablePlant(this.proxy.key(wasmtypes.hashToBytes(key)));
	}
}

export class ImmutableplantobellyState extends wasmtypes.ScProxy {
	allowedPlantOracles(): sc.ArrayOfImmutableAgentID {
		return new sc.ArrayOfImmutableAgentID(this.proxy.root(sc.StateAllowedPlantOracles));
	}

	allowedWeatherOracles(): sc.ArrayOfImmutableAgentID {
		return new sc.ArrayOfImmutableAgentID(this.proxy.root(sc.StateAllowedWeatherOracles));
	}

	claimIds(): sc.ArrayOfImmutableHash {
		return new sc.ArrayOfImmutableHash(this.proxy.root(sc.StateClaimIds));
	}

	claims(): sc.MapHashToImmutableClaim {
		return new sc.MapHashToImmutableClaim(this.proxy.root(sc.StateClaims));
	}

	ownedPlants(): sc.MapAgentIDToImmutableIds {
		return new sc.MapAgentIDToImmutableIds(this.proxy.root(sc.StateOwnedPlants));
	}

	owner(): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateOwner));
	}

	plantIds(): sc.ArrayOfImmutableHash {
		return new sc.ArrayOfImmutableHash(this.proxy.root(sc.StatePlantIds));
	}

	plantOwners(): sc.ArrayOfImmutableAgentID {
		return new sc.ArrayOfImmutableAgentID(this.proxy.root(sc.StatePlantOwners));
	}

	plants(): sc.MapHashToImmutablePlant {
		return new sc.MapHashToImmutablePlant(this.proxy.root(sc.StatePlants));
	}
}

export class MapHashToMutableClaim extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getClaim(key: wasmtypes.ScHash): sc.MutableClaim {
		return new sc.MutableClaim(this.proxy.key(wasmtypes.hashToBytes(key)));
	}
}

export class MapAgentIDToMutableIds extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getIds(key: wasmtypes.ScAgentID): sc.MutableIds {
		return new sc.MutableIds(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapHashToMutablePlant extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getPlant(key: wasmtypes.ScHash): sc.MutablePlant {
		return new sc.MutablePlant(this.proxy.key(wasmtypes.hashToBytes(key)));
	}
}

export class MutableplantobellyState extends wasmtypes.ScProxy {
	asImmutable(): sc.ImmutableplantobellyState {
		return new sc.ImmutableplantobellyState(this.proxy);
	}

	allowedPlantOracles(): sc.ArrayOfMutableAgentID {
		return new sc.ArrayOfMutableAgentID(this.proxy.root(sc.StateAllowedPlantOracles));
	}

	allowedWeatherOracles(): sc.ArrayOfMutableAgentID {
		return new sc.ArrayOfMutableAgentID(this.proxy.root(sc.StateAllowedWeatherOracles));
	}

	claimIds(): sc.ArrayOfMutableHash {
		return new sc.ArrayOfMutableHash(this.proxy.root(sc.StateClaimIds));
	}

	claims(): sc.MapHashToMutableClaim {
		return new sc.MapHashToMutableClaim(this.proxy.root(sc.StateClaims));
	}

	ownedPlants(): sc.MapAgentIDToMutableIds {
		return new sc.MapAgentIDToMutableIds(this.proxy.root(sc.StateOwnedPlants));
	}

	owner(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateOwner));
	}

	plantIds(): sc.ArrayOfMutableHash {
		return new sc.ArrayOfMutableHash(this.proxy.root(sc.StatePlantIds));
	}

	plantOwners(): sc.ArrayOfMutableAgentID {
		return new sc.ArrayOfMutableAgentID(this.proxy.root(sc.StatePlantOwners));
	}

	plants(): sc.MapHashToMutablePlant {
		return new sc.MapHashToMutablePlant(this.proxy.root(sc.StatePlants));
	}
}

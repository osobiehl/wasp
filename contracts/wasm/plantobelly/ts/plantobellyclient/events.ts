// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "wasmclient"

const plantobellyHandlers = new Map<string, (evt: PlantobellyEvents, msg: string[]) => void>([
	["plantobelly.claim", (evt: PlantobellyEvents, msg: string[]) => evt.claim(new EventClaim(msg))],
	["plantobelly.mint", (evt: PlantobellyEvents, msg: string[]) => evt.mint(new EventMint(msg))],
	["plantobelly.resolution", (evt: PlantobellyEvents, msg: string[]) => evt.resolution(new EventResolution(msg))],
]);

export class PlantobellyEvents implements wasmclient.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	claim: (evt: EventClaim) => void = () => {};
	mint: (evt: EventMint) => void = () => {};
	resolution: (evt: EventResolution) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = plantobellyHandlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onPlantobellyClaim(handler: (evt: EventClaim) => void): void {
		this.claim = handler;
	}

	public onPlantobellyMint(handler: (evt: EventMint) => void): void {
		this.mint = handler;
	}

	public onPlantobellyResolution(handler: (evt: EventResolution) => void): void {
		this.resolution = handler;
	}
}

export class EventClaim extends wasmclient.Event {
	public readonly claimer: wasmclient.AgentID;
	public readonly id: wasmclient.Hash;
	public readonly plantId: wasmclient.Hash;
	
	public constructor(msg: string[]) {
		super(msg);
		this.claimer = this.nextAgentID();
		this.id = this.nextHash();
		this.plantId = this.nextHash();
	}
}

export class EventMint extends wasmclient.Event {
	public readonly balance: wasmclient.Int64;
	public readonly owner: wasmclient.AgentID;
	public readonly tokenId: wasmclient.Hash;
	
	public constructor(msg: string[]) {
		super(msg);
		this.balance = this.nextInt64();
		this.owner = this.nextAgentID();
		this.tokenId = this.nextHash();
	}
}

export class EventResolution extends wasmclient.Event {
	public readonly claimer: wasmclient.AgentID;
	public readonly plantId: wasmclient.Hash;
	public readonly result: wasmclient.Uint32;
	public readonly reward: wasmclient.Int64;
	
	public constructor(msg: string[]) {
		super(msg);
		this.claimer = this.nextAgentID();
		this.plantId = this.nextHash();
		this.result = this.nextUint32();
		this.reward = this.nextInt64();
	}
}
